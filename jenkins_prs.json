[
  {
    "number": 51,
    "title": "Applied recipes UpgradeBomVersion, UpgradeParentVersion",
    "state": "CLOSED",
    "createdAt": "2024-08-28T04:23:37Z",
    "updatedAt": "2024-08-28T04:35:53Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/51",
    "description": "Hello json-path-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id\n\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available",
    "checkStatus": "FAILURE"
  },
  {
    "number": 43,
    "title": "Applied recipes UpgradeBomVersion, UpgradeParentVersion",
    "state": "MERGED",
    "createdAt": "2024-08-28T04:22:47Z",
    "updatedAt": "2024-08-28T04:34:43Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/43",
    "description": "Hello json-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id\n\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 40,
    "title": "Applied recipes UpgradeBomVersion, UpgradeParentVersion",
    "state": "MERGED",
    "createdAt": "2024-08-28T04:21:53Z",
    "updatedAt": "2024-08-28T04:34:34Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/40",
    "description": "Hello gson-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id\n\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 27,
    "title": "Applied recipes UpgradeToRecommendCoreVersion",
    "state": "MERGED",
    "createdAt": "2024-08-26T15:10:15Z",
    "updatedAt": "2024-08-26T15:22:58Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/sqlserver-api-plugin",
    "pluginName": "sqlserver-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/sqlserver-api-plugin/pull/27",
    "description": "Hello sqlserver-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 37,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-08-26T04:06:02Z",
    "updatedAt": "2024-08-26T04:12:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/37",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 39,
    "title": "Applied recipes AddPluginsBom, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-08-24T16:17:08Z",
    "updatedAt": "2024-08-24T16:37:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies",
      "chore"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/39",
    "description": "Hello gson-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add plugins BOM\n    io.jenkins.tools.pluginmodernizer.AddPluginsBom\n    Add the Jenkins BOM to the dependenciesManagement section of the pom.xml\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 38,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "CLOSED",
    "createdAt": "2024-08-24T16:05:03Z",
    "updatedAt": "2024-08-24T16:13:20Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/38",
    "description": "Hello gson-api developers!\nThis is a semi-automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "PENDING"
  },
  {
    "number": 37,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "CLOSED",
    "createdAt": "2024-08-24T15:44:14Z",
    "updatedAt": "2024-08-24T15:58:39Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/37",
    "description": "Hello gson-api developers!\nThis is a semi-automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    \nConfigure the Jenkins bill of material like explained on the tutorial)",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 36,
    "title": "\nApplied recipes io.jenkins.tools.pluginmodernizer.UpgradeBomVersion, io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n",
    "state": "CLOSED",
    "createdAt": "2024-08-24T11:59:06Z",
    "updatedAt": "2024-08-24T12:10:42Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/36",
    "description": "Hello gson-api developers!\nThis is a semi-automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade BOM version\n\n\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade parent version",
    "checkStatus": "PENDING"
  },
  {
    "number": 39,
    "title": "Automated PR",
    "state": "MERGED",
    "createdAt": "2024-08-24T05:21:01Z",
    "updatedAt": "2024-08-24T05:28:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/39",
    "description": "Applied the following recipes: io.jenkins.tools.pluginmodernizer.UpgradeBomVersion",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 12,
    "title": "Automated PR",
    "state": "CLOSED",
    "createdAt": "2024-08-20T13:32:28Z",
    "updatedAt": "2025-02-13T17:47:33Z",
    "user": "gounthar",
    "repository": "jenkinsci/aio-tests-plugin",
    "pluginName": "aio-tests",
    "labels": null,
    "url": "https://github.com/jenkinsci/aio-tests-plugin/pull/12",
    "description": "Applied the following recipes: AddPluginsBom, AddCodeOwner",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 4,
    "title": "Automated PR",
    "state": "CLOSED",
    "createdAt": "2024-08-20T13:30:17Z",
    "updatedAt": "2025-02-13T17:44:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/agent-server-parameter-plugin",
    "pluginName": "agent-server-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/agent-server-parameter-plugin/pull/4",
    "description": "Applied the following recipes: AddPluginsBom, AddCodeOwner",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 36,
    "title": "chore(maven): AddPluginsBom, AddCodeOwner",
    "state": "CLOSED",
    "createdAt": "2024-08-20T13:25:02Z",
    "updatedAt": "2024-09-13T09:41:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/negotiatesso-plugin",
    "pluginName": "NegotiateSSO",
    "labels": null,
    "url": "https://github.com/jenkinsci/negotiatesso-plugin/pull/36",
    "description": "Applied the following recipes: AddPluginsBom, AddCodeOwner",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 1640,
    "title": "Automated PR",
    "state": "CLOSED",
    "createdAt": "2024-08-19T09:50:15Z",
    "updatedAt": "2024-08-24T04:33:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/git-plugin",
    "pluginName": "git",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/git-plugin/pull/1640",
    "description": "Applied the following recipes: AddPluginsBom, AddCodeOwner",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 213,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:57:21Z",
    "updatedAt": "2024-09-29T07:40:01Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/213",
    "description": "Hello skip-notifications-trait developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 339,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:56:02Z",
    "updatedAt": "2024-09-29T07:40:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/postgresql-fingerprint-storage-plugin",
    "pluginName": "postgresql-fingerprint-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/postgresql-fingerprint-storage-plugin/pull/339",
    "description": "Hello postgresql-fingerprint-storage developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 99,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:53:43Z",
    "updatedAt": "2024-09-29T07:40:23Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/parameter-separator-plugin",
    "pluginName": "parameter-separator",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/parameter-separator-plugin/pull/99",
    "description": "Hello parameter-separator developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 121,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:51:11Z",
    "updatedAt": "2024-09-29T07:40:35Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/nunit-plugin",
    "pluginName": "nunit",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/nunit-plugin/pull/121",
    "description": "Hello nunit developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 141,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:49:31Z",
    "updatedAt": "2024-09-29T07:40:45Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/141",
    "description": "Hello next-executions developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 115,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:48:04Z",
    "updatedAt": "2024-09-29T07:40:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/login-theme-plugin",
    "pluginName": "login-theme",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/login-theme-plugin/pull/115",
    "description": "Hello login-theme developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 252,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:46:52Z",
    "updatedAt": "2024-09-29T07:41:08Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/locale-plugin",
    "pluginName": "locale",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/locale-plugin/pull/252",
    "description": "Hello locale developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 139,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:45:35Z",
    "updatedAt": "2024-09-29T07:41:20Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/junit-attachments-plugin",
    "pluginName": "junit-attachments",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/junit-attachments-plugin/pull/139",
    "description": "Hello junit-attachments developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 57,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:44:17Z",
    "updatedAt": "2024-09-29T07:50:10Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/57",
    "description": "Hello json-path-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 48,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:43:17Z",
    "updatedAt": "2024-09-29T07:42:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/48",
    "description": "Hello json-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 44,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:42:14Z",
    "updatedAt": "2024-09-29T07:44:59Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/44",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 44,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:41:09Z",
    "updatedAt": "2024-09-29T07:45:09Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-artifactory-storage-plugin",
    "pluginName": "jobcacher-artifactory-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-artifactory-storage-plugin/pull/44",
    "description": "Hello jobcacher-artifactory-storage developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 353,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:39:52Z",
    "updatedAt": "2024-09-29T07:45:42Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-plugin",
    "pluginName": "jobcacher",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-plugin/pull/353",
    "description": "Hello jobcacher developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 46,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:37:10Z",
    "updatedAt": "2024-09-29T07:45:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/46",
    "description": "Hello gson-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 92,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "CLOSED",
    "createdAt": "2024-09-29T06:34:49Z",
    "updatedAt": "2024-09-29T08:02:45Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/flyway-runner-plugin",
    "pluginName": "flyway-runner",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/flyway-runner-plugin/pull/92",
    "description": "Hello flyway-runner developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "FAILURE"
  },
  {
    "number": 107,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:33:21Z",
    "updatedAt": "2024-09-29T07:44:40Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/flyway-api-plugin",
    "pluginName": "flyway-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/flyway-api-plugin/pull/107",
    "description": "Hello flyway-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 131,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:31:50Z",
    "updatedAt": "2024-09-29T07:46:59Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/131",
    "description": "Hello file-operations developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 121,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:30:32Z",
    "updatedAt": "2024-09-29T07:47:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/121",
    "description": "Hello extra-tool-installers developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 103,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:29:16Z",
    "updatedAt": "2024-09-29T07:47:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extension-filter-plugin",
    "pluginName": "extension-filter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extension-filter-plugin/pull/103",
    "description": "Hello extension-filter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 64,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:28:03Z",
    "updatedAt": "2024-09-29T07:47:34Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/coverage-badges-extension-plugin",
    "pluginName": "coverage-badges-extension",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/coverage-badges-extension-plugin/pull/64",
    "description": "Hello coverage-badges-extension developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 3,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:26:33Z",
    "updatedAt": "2024-09-29T07:47:57Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/commons-math3-api-plugin",
    "pluginName": "commons-math3-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/commons-math3-api-plugin/pull/3",
    "description": "Hello commons-math3-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 30,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:25:36Z",
    "updatedAt": "2024-09-29T07:48:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/byte-buddy-api-plugin",
    "pluginName": "byte-buddy-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/byte-buddy-api-plugin/pull/30",
    "description": "Hello byte-buddy-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 228,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:24:38Z",
    "updatedAt": "2024-09-29T07:48:18Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/228",
    "description": "Hello bitbucket-kubernetes-credentials developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 46,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:23:13Z",
    "updatedAt": "2024-09-29T07:48:25Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/46",
    "description": "Hello asm-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 17,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:22:13Z",
    "updatedAt": "2024-09-29T07:48:35Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/17",
    "description": "Hello artifactory-client-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 70,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:21:10Z",
    "updatedAt": "2024-09-29T07:49:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-artifact-manager-plugin",
    "pluginName": "artifactory-artifact-manager",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-artifact-manager-plugin/pull/70",
    "description": "Hello artifactory-artifact-manager developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 257,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-29T06:19:54Z",
    "updatedAt": "2024-09-29T07:18:27Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/ansible-plugin",
    "pluginName": "ansible",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/ansible-plugin/pull/257",
    "description": "Hello ansible developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 212,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:50:12Z",
    "updatedAt": "2024-09-23T04:19:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/212",
    "description": "Hello skip-notifications-trait developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 338,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:48:44Z",
    "updatedAt": "2024-09-23T04:20:03Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/postgresql-fingerprint-storage-plugin",
    "pluginName": "postgresql-fingerprint-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/postgresql-fingerprint-storage-plugin/pull/338",
    "description": "Hello postgresql-fingerprint-storage developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 98,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:47:02Z",
    "updatedAt": "2024-09-23T04:20:10Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/parameter-separator-plugin",
    "pluginName": "parameter-separator",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/parameter-separator-plugin/pull/98",
    "description": "Hello parameter-separator developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 120,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:44:17Z",
    "updatedAt": "2024-09-23T04:44:02Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/nunit-plugin",
    "pluginName": "nunit",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/nunit-plugin/pull/120",
    "description": "Hello nunit developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 140,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:42:51Z",
    "updatedAt": "2024-09-23T04:20:16Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/140",
    "description": "Hello next-executions developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 114,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:41:28Z",
    "updatedAt": "2024-09-23T04:20:24Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/login-theme-plugin",
    "pluginName": "login-theme",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/login-theme-plugin/pull/114",
    "description": "Hello login-theme developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 251,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:39:57Z",
    "updatedAt": "2024-09-23T04:20:31Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/locale-plugin",
    "pluginName": "locale",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/locale-plugin/pull/251",
    "description": "Hello locale developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 138,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:38:23Z",
    "updatedAt": "2024-09-23T08:54:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/junit-attachments-plugin",
    "pluginName": "junit-attachments",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/junit-attachments-plugin/pull/138",
    "description": "Hello junit-attachments developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 56,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "CLOSED",
    "createdAt": "2024-09-23T03:36:53Z",
    "updatedAt": "2024-09-23T03:48:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/56",
    "description": "Hello json-path-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "FAILURE"
  },
  {
    "number": 47,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:35:44Z",
    "updatedAt": "2024-09-23T03:47:29Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/47",
    "description": "Hello json-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 43,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:34:29Z",
    "updatedAt": "2024-09-23T03:49:49Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/43",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 43,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:33:15Z",
    "updatedAt": "2024-09-23T04:20:39Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-artifactory-storage-plugin",
    "pluginName": "jobcacher-artifactory-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-artifactory-storage-plugin/pull/43",
    "description": "Hello jobcacher-artifactory-storage developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 45,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:30:12Z",
    "updatedAt": "2024-09-23T03:49:39Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/45",
    "description": "Hello gson-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 91,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:27:32Z",
    "updatedAt": "2024-09-23T04:20:47Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/flyway-runner-plugin",
    "pluginName": "flyway-runner",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/flyway-runner-plugin/pull/91",
    "description": "Hello flyway-runner developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 102,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "CLOSED",
    "createdAt": "2024-09-23T03:25:59Z",
    "updatedAt": "2024-09-23T04:21:35Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/flyway-api-plugin",
    "pluginName": "flyway-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/flyway-api-plugin/pull/102",
    "description": "Hello flyway-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "FAILURE"
  },
  {
    "number": 130,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:24:22Z",
    "updatedAt": "2024-09-23T03:49:31Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/130",
    "description": "Hello file-operations developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 120,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:23:00Z",
    "updatedAt": "2024-09-23T03:49:25Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/120",
    "description": "Hello extra-tool-installers developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 102,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "CLOSED",
    "createdAt": "2024-09-23T03:21:33Z",
    "updatedAt": "2024-09-23T03:51:00Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extension-filter-plugin",
    "pluginName": "extension-filter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extension-filter-plugin/pull/102",
    "description": "Hello extension-filter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "FAILURE"
  },
  {
    "number": 63,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:20:16Z",
    "updatedAt": "2024-09-23T03:49:18Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/coverage-badges-extension-plugin",
    "pluginName": "coverage-badges-extension",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/coverage-badges-extension-plugin/pull/63",
    "description": "Hello coverage-badges-extension developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 227,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:18:34Z",
    "updatedAt": "2024-09-23T03:49:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/227",
    "description": "Hello bitbucket-kubernetes-credentials developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 45,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:17:08Z",
    "updatedAt": "2024-09-23T03:48:57Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/45",
    "description": "Hello asm-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 69,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:16:01Z",
    "updatedAt": "2024-09-23T03:48:48Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-artifact-manager-plugin",
    "pluginName": "artifactory-artifact-manager",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-artifact-manager-plugin/pull/69",
    "description": "Hello artifactory-artifact-manager developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 256,
    "title": "Applied recipes UpgradeParentVersion, UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-09-23T03:14:07Z",
    "updatedAt": "2024-09-23T03:51:47Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/ansible-plugin",
    "pluginName": "ansible",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/ansible-plugin/pull/256",
    "description": "Hello ansible developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade parent version\n    io.jenkins.tools.pluginmodernizer.UpgradeParentVersion\n    Upgrade the parent version to latest available\n\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 224,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:44:03Z",
    "updatedAt": "2024-10-26T07:29:03Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/224",
    "description": "Hello skip-notifications-trait developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 347,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:42:16Z",
    "updatedAt": "2024-10-26T06:50:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/postgresql-fingerprint-storage-plugin",
    "pluginName": "postgresql-fingerprint-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/postgresql-fingerprint-storage-plugin/pull/347",
    "description": "Hello postgresql-fingerprint-storage developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 163,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:39:56Z",
    "updatedAt": "2024-10-26T06:50:02Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-npm-plugin",
    "pluginName": "pipeline-npm",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-npm-plugin/pull/163",
    "description": "Hello pipeline-npm developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 107,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:38:24Z",
    "updatedAt": "2024-10-26T06:49:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/parameter-separator-plugin",
    "pluginName": "parameter-separator",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/parameter-separator-plugin/pull/107",
    "description": "Hello parameter-separator developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 223,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:36:12Z",
    "updatedAt": "2024-10-26T06:49:48Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openshift-k8s-credentials-plugin",
    "pluginName": "openshift-k8s-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/openshift-k8s-credentials-plugin/pull/223",
    "description": "Hello openshift-k8s-credentials developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 125,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:35:01Z",
    "updatedAt": "2024-10-26T06:49:31Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/nunit-plugin",
    "pluginName": "nunit",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/nunit-plugin/pull/125",
    "description": "Hello nunit developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 148,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:33:39Z",
    "updatedAt": "2024-10-26T07:29:22Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/148",
    "description": "Hello next-executions developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 46,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:32:31Z",
    "updatedAt": "2024-10-26T06:47:27Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/mariadb-api-plugin",
    "pluginName": "mariadb-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/mariadb-api-plugin/pull/46",
    "description": "Hello mariadb-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 124,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:31:32Z",
    "updatedAt": "2024-10-26T06:47:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/login-theme-plugin",
    "pluginName": "login-theme",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/login-theme-plugin/pull/124",
    "description": "Hello login-theme developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 61,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:29:36Z",
    "updatedAt": "2024-10-26T06:34:05Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/61",
    "description": "Hello json-path-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 51,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:28:37Z",
    "updatedAt": "2024-10-26T06:33:56Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/51",
    "description": "Hello json-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 47,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:27:36Z",
    "updatedAt": "2024-10-26T06:32:10Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/47",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 58,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:26:39Z",
    "updatedAt": "2024-10-26T06:31:59Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-artifactory-storage-plugin",
    "pluginName": "jobcacher-artifactory-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-artifactory-storage-plugin/pull/58",
    "description": "Hello jobcacher-artifactory-storage developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 368,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:25:22Z",
    "updatedAt": "2024-10-26T06:32:25Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-plugin",
    "pluginName": "jobcacher",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-plugin/pull/368",
    "description": "Hello jobcacher developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 166,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:23:55Z",
    "updatedAt": "2024-10-26T06:30:34Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/hidden-parameter-plugin",
    "pluginName": "hidden-parameter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/hidden-parameter-plugin/pull/166",
    "description": "Hello hidden-parameter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 49,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:22:48Z",
    "updatedAt": "2024-10-26T06:28:46Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/49",
    "description": "Hello gson-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 197,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:21:49Z",
    "updatedAt": "2024-10-26T06:28:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitlab-kubernetes-credentials-plugin",
    "pluginName": "gitlab-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gitlab-kubernetes-credentials-plugin/pull/197",
    "description": "Hello gitlab-kubernetes-credentials developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 138,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:19:37Z",
    "updatedAt": "2024-10-26T06:29:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/138",
    "description": "Hello file-operations developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 127,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:18:35Z",
    "updatedAt": "2024-10-26T06:28:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/127",
    "description": "Hello extra-tool-installers developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 55,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:16:27Z",
    "updatedAt": "2024-10-26T06:29:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mariadb-plugin",
    "pluginName": "database-mariadb",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-mariadb-plugin/pull/55",
    "description": "Hello database-mariadb developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 71,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:15:18Z",
    "updatedAt": "2024-10-26T06:29:05Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/coverage-badges-extension-plugin",
    "pluginName": "coverage-badges-extension",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/coverage-badges-extension-plugin/pull/71",
    "description": "Hello coverage-badges-extension developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 8,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:14:07Z",
    "updatedAt": "2024-10-26T06:29:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/commons-math3-api-plugin",
    "pluginName": "commons-math3-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/commons-math3-api-plugin/pull/8",
    "description": "Hello commons-math3-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 42,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:13:09Z",
    "updatedAt": "2024-10-26T06:29:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/byte-buddy-api-plugin",
    "pluginName": "byte-buddy-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/byte-buddy-api-plugin/pull/42",
    "description": "Hello byte-buddy-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 243,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:12:13Z",
    "updatedAt": "2024-10-26T06:30:08Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/243",
    "description": "Hello bitbucket-kubernetes-credentials developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 52,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:10:55Z",
    "updatedAt": "2024-10-26T06:30:02Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/52",
    "description": "Hello asm-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 30,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:09:58Z",
    "updatedAt": "2024-10-26T06:30:27Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/30",
    "description": "Hello artifactory-client-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 81,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:08:51Z",
    "updatedAt": "2024-10-26T06:30:20Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-artifact-manager-plugin",
    "pluginName": "artifactory-artifact-manager",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-artifact-manager-plugin/pull/81",
    "description": "Hello artifactory-artifact-manager developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 499,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-30T16:41:04Z",
    "updatedAt": "2024-12-30T17:07:29Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/branch-api-plugin",
    "pluginName": "branch-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/branch-api-plugin/pull/499",
    "description": "Hello branch-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 589,
    "title": "Update pom.xml to match archetype and use `jenkins.baseline` property to keep bom in sync",
    "state": "MERGED",
    "createdAt": "2024-12-30T16:29:25Z",
    "updatedAt": "2025-01-02T16:27:54Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/script-security-plugin",
    "pluginName": "script-security",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/script-security-plugin/pull/589",
    "description": "Hello script-security developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate pom to using jenkins.baseline property if bom is present\n    io.jenkins.tools.pluginmodernizer.MigrateToJenkinsBaseLineProperty\n    Migrate pom to using jenkins.baseline property if bom is present.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 239,
    "title": "Update pom.xml to match archetype and use `jenkins.baseline` property to keep bom in sync",
    "state": "MERGED",
    "createdAt": "2024-12-30T14:43:12Z",
    "updatedAt": "2024-12-30T16:17:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/token-macro-plugin",
    "pluginName": "token-macro",
    "labels": null,
    "url": "https://github.com/jenkinsci/token-macro-plugin/pull/239",
    "description": "Hello token-macro developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate pom to using jenkins.baseline property if bom is present\n    io.jenkins.tools.pluginmodernizer.MigrateToJenkinsBaseLineProperty\n    Migrate pom to using jenkins.baseline property if bom is present.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 31,
    "title": "Require 2.479.1 and Java 17",
    "state": "MERGED",
    "createdAt": "2024-12-30T14:31:17Z",
    "updatedAt": "2024-12-30T14:35:00Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-sqlserver-plugin",
    "pluginName": "database-sqlserver",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-sqlserver-plugin/pull/31",
    "description": "Hello database-sqlserver developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 41,
    "title": "Require 2.479.1 and Java 17",
    "state": "MERGED",
    "createdAt": "2024-12-30T14:21:23Z",
    "updatedAt": "2024-12-30T14:27:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/sqlserver-api-plugin",
    "pluginName": "sqlserver-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/sqlserver-api-plugin/pull/41",
    "description": "Hello sqlserver-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 61,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-30T10:20:28Z",
    "updatedAt": "2024-12-30T12:18:10Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/description-setter-plugin",
    "pluginName": "description-setter",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/description-setter-plugin/pull/61",
    "description": "Hello description-setter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 48,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-30T10:20:02Z",
    "updatedAt": "2024-12-30T12:29:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/discard-old-build-plugin",
    "pluginName": "discard-old-build",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/discard-old-build-plugin/pull/48",
    "description": "Hello discard-old-build developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 63,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-29T19:17:17Z",
    "updatedAt": "2025-02-03T10:10:58Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitee-plugin",
    "pluginName": "gitee",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/gitee-plugin/pull/63",
    "description": "Hello gitee developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 60,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T19:11:45Z",
    "updatedAt": "2024-12-30T09:32:01Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/description-setter-plugin",
    "pluginName": "description-setter",
    "labels": null,
    "url": "https://github.com/jenkinsci/description-setter-plugin/pull/60",
    "description": "Hello description-setter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 47,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T19:10:44Z",
    "updatedAt": "2024-12-30T09:32:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/discard-old-build-plugin",
    "pluginName": "discard-old-build",
    "labels": null,
    "url": "https://github.com/jenkinsci/discard-old-build-plugin/pull/47",
    "description": "Hello discard-old-build developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 8,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2024-12-29T19:09:08Z",
    "updatedAt": "2025-04-03T19:07:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/levo-plugin",
    "pluginName": "levo",
    "labels": null,
    "url": "https://github.com/jenkinsci/levo-plugin/pull/8",
    "description": "Hello levo developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 51,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-29T19:07:16Z",
    "updatedAt": "2024-12-29T19:39:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/built-on-column-plugin",
    "pluginName": "built-on-column",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/built-on-column-plugin/pull/51",
    "description": "Hello built-on-column developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T18:59:51Z",
    "updatedAt": "2024-12-29T19:06:42Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/levo-plugin",
    "pluginName": "levo",
    "labels": null,
    "url": "https://github.com/jenkinsci/levo-plugin/pull/7",
    "description": "Hello levo developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 13,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T18:52:10Z",
    "updatedAt": "2025-02-06T04:29:49Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/shared-library-version-override-plugin",
    "pluginName": "shared-library-version-override",
    "labels": null,
    "url": "https://github.com/jenkinsci/shared-library-version-override-plugin/pull/13",
    "description": "Hello shared-library-version-override developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 152,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T13:28:44Z",
    "updatedAt": "2025-06-04T07:31:56Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/xunit-plugin",
    "pluginName": "xunit",
    "labels": null,
    "url": "https://github.com/jenkinsci/xunit-plugin/pull/152",
    "description": "Hello xunit developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 269,
    "title": "Remove release drafter due to enabled cd",
    "state": "MERGED",
    "createdAt": "2024-12-29T13:20:12Z",
    "updatedAt": "2025-01-14T09:05:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/github-api-plugin",
    "pluginName": "github-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-api-plugin/pull/269",
    "description": "Hello github-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Remove Release Drafter if CD is enabled\n    io.jenkins.tools.pluginmodernizer.RemoveReleaseDrafter\n    Remove Release Drafter if CD is enabled. See https://www.jenkins.io/doc/developer/publishing/releasing-cd/#configure-release-drafter",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 268,
    "title": "Applied recipe RemoveReleaseDrafter",
    "state": "CLOSED",
    "createdAt": "2024-12-29T13:03:31Z",
    "updatedAt": "2024-12-29T13:08:14Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/github-api-plugin",
    "pluginName": "github-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-api-plugin/pull/268",
    "description": "Hello github-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Remove Release Drafter if CD is enabled\n    io.jenkins.tools.pluginmodernizer.RemoveReleaseDrafter\n    Remove Release Drafter if CD is enabled. See https://www.jenkins.io/doc/developer/publishing/releasing-cd/#configure-release-drafter",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 309,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-29T12:38:59Z",
    "updatedAt": "2025-01-02T18:57:00Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/ansicolor-plugin",
    "pluginName": "ansicolor",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansicolor-plugin/pull/309",
    "description": "Hello ansicolor developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 156,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T05:29:28Z",
    "updatedAt": "2025-02-22T17:59:24Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/ant-plugin",
    "pluginName": "ant",
    "labels": null,
    "url": "https://github.com/jenkinsci/ant-plugin/pull/156",
    "description": "Hello ant developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 9,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-29T04:21:16Z",
    "updatedAt": "2024-12-30T14:13:31Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/r-plugin",
    "pluginName": "r",
    "labels": null,
    "url": "https://github.com/jenkinsci/r-plugin/pull/9",
    "description": "Hello r developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 244,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T18:07:27Z",
    "updatedAt": "2025-01-03T03:29:09Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/durable-task-plugin",
    "pluginName": "durable-task",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/durable-task-plugin/pull/244",
    "description": "Hello durable-task developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 148,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:49:33Z",
    "updatedAt": "2025-01-03T03:29:17Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-graph-analysis-plugin",
    "pluginName": "pipeline-graph-analysis",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-graph-analysis-plugin/pull/148",
    "description": "Hello pipeline-graph-analysis developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 98,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:46:01Z",
    "updatedAt": "2025-01-02T17:51:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-aggregator-plugin",
    "pluginName": "workflow-aggregator",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-aggregator-plugin/pull/98",
    "description": "Hello workflow-aggregator developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 133,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:38:56Z",
    "updatedAt": "2025-01-03T03:29:30Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-stage-step-plugin",
    "pluginName": "pipeline-stage-step",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-stage-step-plugin/pull/133",
    "description": "Hello pipeline-stage-step developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 290,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:35:41Z",
    "updatedAt": "2025-01-03T03:29:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-support-plugin",
    "pluginName": "workflow-support",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-support-plugin/pull/290",
    "description": "Hello workflow-support developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 367,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:31:27Z",
    "updatedAt": "2025-01-03T03:30:14Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-api-plugin",
    "pluginName": "workflow-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-api-plugin/pull/367",
    "description": "Hello workflow-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 153,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:28:49Z",
    "updatedAt": "2025-01-03T03:30:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-scm-step-plugin",
    "pluginName": "workflow-scm-step",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-scm-step-plugin/pull/153",
    "description": "Hello workflow-scm-step developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 191,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:21:17Z",
    "updatedAt": "2025-01-03T03:33:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-step-api-plugin",
    "pluginName": "workflow-step-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-step-api-plugin/pull/191",
    "description": "Hello workflow-step-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 211,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:21:02Z",
    "updatedAt": "2025-02-22T17:00:57Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/structs-plugin",
    "pluginName": "structs",
    "labels": null,
    "url": "https://github.com/jenkinsci/structs-plugin/pull/211",
    "description": "Hello structs developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 133,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T15:16:07Z",
    "updatedAt": "2024-12-28T15:30:52Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/build-timeout-plugin",
    "pluginName": "build-timeout",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-timeout-plugin/pull/133",
    "description": "Hello build-timeout developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 296,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T15:07:51Z",
    "updatedAt": "2025-01-13T09:22:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/metrics-plugin",
    "pluginName": "metrics",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/metrics-plugin/pull/296",
    "description": "Hello metrics developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 37,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T14:02:35Z",
    "updatedAt": "2024-12-29T17:46:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openid-plugin",
    "pluginName": "openid",
    "labels": null,
    "url": "https://github.com/jenkinsci/openid-plugin/pull/37",
    "description": "Hello openid developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 235,
    "title": "Require 2.479.1 and Java 17",
    "state": "MERGED",
    "createdAt": "2024-12-28T13:49:01Z",
    "updatedAt": "2024-12-28T14:06:43Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/235",
    "description": "Hello skip-notifications-trait developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 113,
    "title": "Bump bom to 3814.v9563d972079a_",
    "state": "MERGED",
    "createdAt": "2024-12-18T05:49:00Z",
    "updatedAt": "2024-12-18T06:02:56Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extension-filter-plugin",
    "pluginName": "extension-filter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extension-filter-plugin/pull/113",
    "description": "Hello extension-filter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 39,
    "title": "Bump bom to 3814.v9563d972079a_",
    "state": "MERGED",
    "createdAt": "2024-12-18T05:44:21Z",
    "updatedAt": "2024-12-18T05:50:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/39",
    "description": "Hello artifactory-client-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 55,
    "title": "Bump bom to 3814.v9563d972079a_",
    "state": "CLOSED",
    "createdAt": "2024-12-16T06:45:57Z",
    "updatedAt": "2024-12-16T06:59:45Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/55",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 54,
    "title": "Bump bom to 3814.v9563d972079a_",
    "state": "CLOSED",
    "createdAt": "2024-12-16T06:22:32Z",
    "updatedAt": "2024-12-16T06:25:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/54",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "PENDING"
  },
  {
    "number": 141,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-30T10:15:29Z",
    "updatedAt": "2025-03-03T17:05:14Z",
    "user": "gounthar",
    "repository": "jenkinsci/vsphere-cloud-plugin",
    "pluginName": "vsphere-cloud",
    "labels": null,
    "url": "https://github.com/jenkinsci/vsphere-cloud-plugin/pull/141",
    "description": "Hello vsphere-cloud developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 150,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "MERGED",
    "createdAt": "2025-01-30T09:23:27Z",
    "updatedAt": "2025-01-30T12:09:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/log-parser-plugin",
    "pluginName": "log-parser",
    "labels": null,
    "url": "https://github.com/jenkinsci/log-parser-plugin/pull/150",
    "description": "Hello log-parser developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 12,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "MERGED",
    "createdAt": "2025-01-30T09:14:58Z",
    "updatedAt": "2025-02-14T16:57:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/results-cache-plugin",
    "pluginName": "results-cache",
    "labels": null,
    "url": "https://github.com/jenkinsci/results-cache-plugin/pull/12",
    "description": "Hello results-cache developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 11,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T22:02:38Z",
    "updatedAt": "2025-02-15T20:19:47Z",
    "user": "gounthar",
    "repository": "jenkinsci/grypescanner-plugin",
    "pluginName": "grypescanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/grypescanner-plugin/pull/11",
    "description": "Hello grypescanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 12,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:59:20Z",
    "updatedAt": "2025-02-15T20:23:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/habitat-plugin",
    "pluginName": "habitat",
    "labels": null,
    "url": "https://github.com/jenkinsci/habitat-plugin/pull/12",
    "description": "Hello habitat developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 20,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:55:44Z",
    "updatedAt": "2025-02-15T20:26:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/hashicorp-vault-pipeline-plugin",
    "pluginName": "hashicorp-vault-pipeline",
    "labels": null,
    "url": "https://github.com/jenkinsci/hashicorp-vault-pipeline-plugin/pull/20",
    "description": "Hello hashicorp-vault-pipeline developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 92,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:47:55Z",
    "updatedAt": "2025-02-25T09:45:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/huaweicloud-ecs-plugin",
    "pluginName": "huaweicloud-ecs",
    "labels": null,
    "url": "https://github.com/jenkinsci/huaweicloud-ecs-plugin/pull/92",
    "description": "Hello huaweicloud-ecs developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 26,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-01-29T21:47:34Z",
    "updatedAt": "2025-04-24T11:57:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/proxmox-plugin",
    "pluginName": "proxmox",
    "labels": null,
    "url": "https://github.com/jenkinsci/proxmox-plugin/pull/26",
    "description": "Hello proxmox developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 18,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:44:07Z",
    "updatedAt": "2025-02-15T20:34:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/wsclean-plugin",
    "pluginName": "hudson-wsclean-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/wsclean-plugin/pull/18",
    "description": "Hello hudson-wsclean-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 130,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-29T21:38:50Z",
    "updatedAt": "2025-06-10T14:42:28Z",
    "user": "gounthar",
    "repository": "jenkinsci/image-tag-parameter-plugin",
    "pluginName": "image-tag-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/image-tag-parameter-plugin/pull/130",
    "description": "Hello image-tag-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 2,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:35:32Z",
    "updatedAt": "2025-02-15T20:43:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/immuniweb-plugin",
    "pluginName": "immuniweb",
    "labels": null,
    "url": "https://github.com/jenkinsci/immuniweb-plugin/pull/2",
    "description": "Hello immuniweb developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 11,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-01-29T21:33:08Z",
    "updatedAt": "2025-02-15T15:50:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/skip-cron-rebuild-plugin",
    "pluginName": "skip-cron-rebuild",
    "labels": null,
    "url": "https://github.com/jenkinsci/skip-cron-rebuild-plugin/pull/11",
    "description": "Hello skip-cron-rebuild developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:27:47Z",
    "updatedAt": "2025-02-15T20:53:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/instana-plugin",
    "pluginName": "instana",
    "labels": null,
    "url": "https://github.com/jenkinsci/instana-plugin/pull/11",
    "description": "Hello instana developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 24,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:22:41Z",
    "updatedAt": "2025-02-15T20:59:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/ironmq-notifier-plugin",
    "pluginName": "ironmq-notifier",
    "labels": null,
    "url": "https://github.com/jenkinsci/ironmq-notifier-plugin/pull/24",
    "description": "Hello ironmq-notifier developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 33,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:14:13Z",
    "updatedAt": "2025-02-15T21:13:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/jobcopy-builder-plugin",
    "pluginName": "jobcopy-builder",
    "labels": null,
    "url": "https://github.com/jenkinsci/jobcopy-builder-plugin/pull/33",
    "description": "Hello jobcopy-builder developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 35,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:54:13Z",
    "updatedAt": "2025-03-11T11:33:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/katalon-plugin",
    "pluginName": "katalon",
    "labels": null,
    "url": "https://github.com/jenkinsci/katalon-plugin/pull/35",
    "description": "Hello katalon developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:48:18Z",
    "updatedAt": "2025-02-15T21:28:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/kubesphere-token-auth-plugin",
    "pluginName": "kubesphere-token-auth",
    "labels": null,
    "url": "https://github.com/jenkinsci/kubesphere-token-auth-plugin/pull/3",
    "description": "Hello kubesphere-token-auth developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 6,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:43:14Z",
    "updatedAt": "2025-02-15T21:32:58Z",
    "user": "gounthar",
    "repository": "jenkinsci/lacework-security-scanner-plugin",
    "pluginName": "lacework-security-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/lacework-security-scanner-plugin/pull/6",
    "description": "Hello lacework-security-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 9,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:39:51Z",
    "updatedAt": "2025-02-15T21:36:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/levo-plugin",
    "pluginName": "levo",
    "labels": null,
    "url": "https://github.com/jenkinsci/levo-plugin/pull/9",
    "description": "Hello levo developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 18,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:31:23Z",
    "updatedAt": "2025-02-15T21:42:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/llvm-cov-plugin",
    "pluginName": "llvm-cov",
    "labels": null,
    "url": "https://github.com/jenkinsci/llvm-cov-plugin/pull/18",
    "description": "Hello llvm-cov developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 11,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-29T20:26:08Z",
    "updatedAt": "2025-02-11T11:32:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/localization-support-plugin",
    "pluginName": "localization-support",
    "labels": null,
    "url": "https://github.com/jenkinsci/localization-support-plugin/pull/11",
    "description": "Hello localization-support developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 2,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:22:47Z",
    "updatedAt": "2025-02-15T21:46:47Z",
    "user": "gounthar",
    "repository": "jenkinsci/log-command-plugin",
    "pluginName": "log-command",
    "labels": null,
    "url": "https://github.com/jenkinsci/log-command-plugin/pull/2",
    "description": "Hello log-command developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 149,
    "title": "Require 2.440.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T20:19:38Z",
    "updatedAt": "2025-01-30T03:44:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/log-parser-plugin",
    "pluginName": "log-parser",
    "labels": null,
    "url": "https://github.com/jenkinsci/log-parser-plugin/pull/149",
    "description": "Hello log-parser developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 1,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:16:08Z",
    "updatedAt": "2025-03-13T18:21:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/logback-nats-appender-plugin",
    "pluginName": "logback-nats-appender",
    "labels": null,
    "url": "https://github.com/jenkinsci/logback-nats-appender-plugin/pull/1",
    "description": "Hello logback-nats-appender developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 141,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:11:40Z",
    "updatedAt": "2025-01-29T20:11:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/macstadium-orka-plugin",
    "pluginName": "macstadium-orka",
    "labels": null,
    "url": "https://github.com/jenkinsci/macstadium-orka-plugin/pull/141",
    "description": "Hello macstadium-orka developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 8,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:04:40Z",
    "updatedAt": "2025-01-29T20:04:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/mergebase-sca-plugin",
    "pluginName": "mergebase-sca",
    "labels": null,
    "url": "https://github.com/jenkinsci/mergebase-sca-plugin/pull/8",
    "description": "Hello mergebase-sca developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:00:42Z",
    "updatedAt": "2025-01-29T20:00:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/metadefender-plugin",
    "pluginName": "metadefender",
    "labels": null,
    "url": "https://github.com/jenkinsci/metadefender-plugin/pull/1",
    "description": "Hello metadefender developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 15,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T19:51:53Z",
    "updatedAt": "2025-07-03T07:46:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/metrics-datadog-plugin",
    "pluginName": "metrics-datadog",
    "labels": null,
    "url": "https://github.com/jenkinsci/metrics-datadog-plugin/pull/15",
    "description": "Hello metrics-datadog developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 10,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T19:47:20Z",
    "updatedAt": "2025-01-29T19:47:20Z",
    "user": "gounthar",
    "repository": "jenkinsci/miniorange-saml-sp-plugin",
    "pluginName": "miniorange-saml-sp",
    "labels": null,
    "url": "https://github.com/jenkinsci/miniorange-saml-sp-plugin/pull/10",
    "description": "Hello miniorange-saml-sp developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 10,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T19:39:17Z",
    "updatedAt": "2025-01-29T19:39:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/modernstatus-plugin",
    "pluginName": "modernstatus",
    "labels": null,
    "url": "https://github.com/jenkinsci/modernstatus-plugin/pull/10",
    "description": "Hello modernstatus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T19:29:53Z",
    "updatedAt": "2025-01-29T19:29:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/netdomain-labeler-plugin",
    "pluginName": "netdomain-labeler",
    "labels": null,
    "url": "https://github.com/jenkinsci/netdomain-labeler-plugin/pull/1",
    "description": "Hello netdomain-labeler developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T19:25:44Z",
    "updatedAt": "2025-01-29T19:25:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/neuro-cucumber-plugin",
    "pluginName": "neuro-cucumber",
    "labels": null,
    "url": "https://github.com/jenkinsci/neuro-cucumber-plugin/pull/3",
    "description": "Hello neuro-cucumber developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 71,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T19:22:16Z",
    "updatedAt": "2025-01-29T19:22:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/neuvector-vulnerability-scanner-plugin",
    "pluginName": "neuvector-vulnerability-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/neuvector-vulnerability-scanner-plugin/pull/71",
    "description": "Hello neuvector-vulnerability-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T19:08:18Z",
    "updatedAt": "2025-01-29T19:08:18Z",
    "user": "gounthar",
    "repository": "jenkinsci/nuclei-plugin",
    "pluginName": "nuclei",
    "labels": null,
    "url": "https://github.com/jenkinsci/nuclei-plugin/pull/6",
    "description": "Hello nuclei developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:59:12Z",
    "updatedAt": "2025-01-29T18:59:12Z",
    "user": "gounthar",
    "repository": "jenkinsci/nutanix-calm-plugin",
    "pluginName": "nutanix-calm",
    "labels": null,
    "url": "https://github.com/jenkinsci/nutanix-calm-plugin/pull/7",
    "description": "Hello nutanix-calm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 16,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:54:15Z",
    "updatedAt": "2025-01-29T18:54:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/nvm-wrapper-plugin",
    "pluginName": "nvm-wrapper",
    "labels": null,
    "url": "https://github.com/jenkinsci/nvm-wrapper-plugin/pull/16",
    "description": "Hello nvm-wrapper developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 15,
    "title": "Require 2.414.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:48:50Z",
    "updatedAt": "2025-03-10T21:39:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/octoperf-plugin",
    "pluginName": "octoperf",
    "labels": null,
    "url": "https://github.com/jenkinsci/octoperf-plugin/pull/15",
    "description": "Hello octoperf developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:40:16Z",
    "updatedAt": "2025-01-29T18:40:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/opslevel-plugin",
    "pluginName": "opslevel",
    "labels": null,
    "url": "https://github.com/jenkinsci/opslevel-plugin/pull/4",
    "description": "Hello opslevel developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 16,
    "title": "feat(ci): Builds on the Jenkins Infrastructure",
    "state": "MERGED",
    "createdAt": "2025-01-29T18:36:49Z",
    "updatedAt": "2025-02-14T16:56:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/vmanager-plugin",
    "pluginName": "vmanager-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/vmanager-plugin/pull/16",
    "description": "Hello vmanager-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java 17 and 21.\nYour plugin is already building with Java 17 and 21. We will continue to support these versions.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 9,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:26:44Z",
    "updatedAt": "2025-01-29T18:26:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/osf-builder-suite-for-sfcc-run-job-plugin",
    "pluginName": "osf-builder-suite-for-sfcc-run-job",
    "labels": null,
    "url": "https://github.com/jenkinsci/osf-builder-suite-for-sfcc-run-job-plugin/pull/9",
    "description": "Hello osf-builder-suite-for-sfcc-run-job developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 15,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:20:25Z",
    "updatedAt": "2025-01-29T18:20:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/ostorlab-plugin",
    "pluginName": "ostorlab",
    "labels": null,
    "url": "https://github.com/jenkinsci/ostorlab-plugin/pull/15",
    "description": "Hello ostorlab developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:14:08Z",
    "updatedAt": "2025-01-29T18:14:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/oversecured-plugin",
    "pluginName": "oversecured",
    "labels": null,
    "url": "https://github.com/jenkinsci/oversecured-plugin/pull/2",
    "description": "Hello oversecured developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 15,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T17:58:47Z",
    "updatedAt": "2025-02-25T08:17:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-global-lib-nexus-plugin",
    "pluginName": "pipeline-global-lib-nexus",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-global-lib-nexus-plugin/pull/15",
    "description": "Hello pipeline-global-lib-nexus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 6,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2025-01-29T17:50:56Z",
    "updatedAt": "2025-03-26T14:18:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-keep-running-step-plugin",
    "pluginName": "pipeline-keep-running-step",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-keep-running-step-plugin/pull/6",
    "description": "Hello pipeline-keep-running-step developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T17:42:46Z",
    "updatedAt": "2025-02-14T15:44:33Z",
    "user": "gounthar",
    "repository": "jenkinsci/portscanner-plugin",
    "pluginName": "portscanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/portscanner-plugin/pull/1",
    "description": "Hello portscanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 5,
    "title": "Require 2.462.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T17:30:52Z",
    "updatedAt": "2025-02-13T14:23:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/probely-security-plugin",
    "pluginName": "probely-security",
    "labels": null,
    "url": "https://github.com/jenkinsci/probely-security-plugin/pull/5",
    "description": "Hello probely-security developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 25,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T17:22:13Z",
    "updatedAt": "2025-01-29T18:46:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/proxmox-plugin",
    "pluginName": "proxmox",
    "labels": null,
    "url": "https://github.com/jenkinsci/proxmox-plugin/pull/25",
    "description": "Hello proxmox developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T17:12:54Z",
    "updatedAt": "2025-02-14T15:30:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/publish-over-dropbox-plugin",
    "pluginName": "publish-over-dropbox",
    "labels": null,
    "url": "https://github.com/jenkinsci/publish-over-dropbox-plugin/pull/7",
    "description": "Hello publish-over-dropbox developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T16:54:20Z",
    "updatedAt": "2025-02-14T15:23:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/qiniu-plugin",
    "pluginName": "qiniu",
    "labels": null,
    "url": "https://github.com/jenkinsci/qiniu-plugin/pull/9",
    "description": "Hello qiniu developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 50,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T16:48:10Z",
    "updatedAt": "2025-02-14T15:18:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/qualys-vm-plugin",
    "pluginName": "qualys-vm",
    "labels": null,
    "url": "https://github.com/jenkinsci/qualys-vm-plugin/pull/50",
    "description": "Hello qualys-vm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 36,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T16:42:58Z",
    "updatedAt": "2025-02-14T15:14:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/qualys-was-plugin",
    "pluginName": "qualys-was",
    "labels": null,
    "url": "https://github.com/jenkinsci/qualys-was-plugin/pull/36",
    "description": "Hello qualys-was developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 11,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T16:38:33Z",
    "updatedAt": "2025-07-11T03:02:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/qy-wechat-notification-plugin",
    "pluginName": "qy-wechat-notification",
    "labels": null,
    "url": "https://github.com/jenkinsci/qy-wechat-notification-plugin/pull/11",
    "description": "Hello qy-wechat-notification developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 13,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T16:32:21Z",
    "updatedAt": "2025-03-19T14:47:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/rabbitmq-publisher-plugin",
    "pluginName": "rabbitmq-publisher",
    "labels": null,
    "url": "https://github.com/jenkinsci/rabbitmq-publisher-plugin/pull/13",
    "description": "Hello rabbitmq-publisher developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 36,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-29T16:24:53Z",
    "updatedAt": "2025-04-14T10:50:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/rapid7-insightvm-container-assessment-plugin",
    "pluginName": "rapid7-insightvm-container-assessment",
    "labels": null,
    "url": "https://github.com/jenkinsci/rapid7-insightvm-container-assessment-plugin/pull/36",
    "description": "Hello rapid7-insightvm-container-assessment developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T16:12:11Z",
    "updatedAt": "2025-02-14T14:54:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/rapiddeploy-plugin",
    "pluginName": "rapiddeploy-jenkins",
    "labels": null,
    "url": "https://github.com/jenkinsci/rapiddeploy-plugin/pull/3",
    "description": "Hello rapiddeploy-jenkins developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T15:53:40Z",
    "updatedAt": "2025-02-11T09:42:33Z",
    "user": "gounthar",
    "repository": "jenkinsci/reliza-integration-plugin",
    "pluginName": "reliza-integration",
    "labels": null,
    "url": "https://github.com/jenkinsci/reliza-integration-plugin/pull/4",
    "description": "Hello reliza-integration developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 90,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T15:47:30Z",
    "updatedAt": "2025-02-14T14:48:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/repo-plugin",
    "pluginName": "repo",
    "labels": null,
    "url": "https://github.com/jenkinsci/repo-plugin/pull/90",
    "description": "Hello repo developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 67,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T15:42:09Z",
    "updatedAt": "2025-02-14T14:43:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/repository-connector-plugin",
    "pluginName": "repository-connector",
    "labels": null,
    "url": "https://github.com/jenkinsci/repository-connector-plugin/pull/67",
    "description": "Hello repository-connector developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-01-29T15:37:54Z",
    "updatedAt": "2025-02-14T15:54:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/shutdown-queue-plugin",
    "pluginName": "shutdown-queue",
    "labels": null,
    "url": "https://github.com/jenkinsci/shutdown-queue-plugin/pull/7",
    "description": "Hello shutdown-queue developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this, a maintainer can replay the failed build by substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "Require 2.414.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T15:35:27Z",
    "updatedAt": "2025-02-05T14:17:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/requests-plugin",
    "pluginName": "requests",
    "labels": null,
    "url": "https://github.com/jenkinsci/requests-plugin/pull/10",
    "description": "Hello requests developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T15:31:38Z",
    "updatedAt": "2025-01-30T09:04:28Z",
    "user": "gounthar",
    "repository": "jenkinsci/results-cache-plugin",
    "pluginName": "results-cache",
    "labels": null,
    "url": "https://github.com/jenkinsci/results-cache-plugin/pull/11",
    "description": "Hello results-cache developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 10,
    "title": "Require 2.375.4",
    "state": "CLOSED",
    "createdAt": "2025-01-29T15:27:04Z",
    "updatedAt": "2025-03-10T19:12:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/rich-text-publisher-plugin",
    "pluginName": "rich-text-publisher-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/rich-text-publisher-plugin/pull/10",
    "description": "Hello rich-text-publisher-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T15:13:07Z",
    "updatedAt": "2025-02-14T14:18:20Z",
    "user": "gounthar",
    "repository": "jenkinsci/secure-post-script-plugin",
    "pluginName": "secure-post-script",
    "labels": null,
    "url": "https://github.com/jenkinsci/secure-post-script-plugin/pull/2",
    "description": "Hello secure-post-script developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 3,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T15:03:20Z",
    "updatedAt": "2025-02-14T14:07:14Z",
    "user": "gounthar",
    "repository": "jenkinsci/sematext-plugin",
    "pluginName": "sematext",
    "labels": null,
    "url": "https://github.com/jenkinsci/sematext-plugin/pull/3",
    "description": "Hello sematext developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 42,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T14:55:06Z",
    "updatedAt": "2025-02-19T08:57:28Z",
    "user": "gounthar",
    "repository": "jenkinsci/shelve-project-plugin",
    "pluginName": "shelve-project-plugin",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/shelve-project-plugin/pull/42",
    "description": "Hello shelve-project-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 9,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T14:49:29Z",
    "updatedAt": "2025-02-14T13:49:29Z",
    "user": "gounthar",
    "repository": "jenkinsci/shortcut-job-plugin",
    "pluginName": "shortcut-job",
    "labels": null,
    "url": "https://github.com/jenkinsci/shortcut-job-plugin/pull/9",
    "description": "Hello shortcut-job developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 6,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T14:45:30Z",
    "updatedAt": "2025-01-29T15:33:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/shutdown-queue-plugin",
    "pluginName": "shutdown-queue",
    "labels": null,
    "url": "https://github.com/jenkinsci/shutdown-queue-plugin/pull/6",
    "description": "Hello shutdown-queue developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 51,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T14:41:10Z",
    "updatedAt": "2025-02-14T13:40:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/skenai-plugin",
    "pluginName": "skenai",
    "labels": null,
    "url": "https://github.com/jenkinsci/skenai-plugin/pull/51",
    "description": "Hello skenai developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 10,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T14:37:31Z",
    "updatedAt": "2025-01-29T21:11:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/skip-cron-rebuild-plugin",
    "pluginName": "skip-cron-rebuild",
    "labels": null,
    "url": "https://github.com/jenkinsci/skip-cron-rebuild-plugin/pull/10",
    "description": "Hello skip-cron-rebuild developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 79,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-29T14:28:02Z",
    "updatedAt": "2025-03-27T14:24:46Z",
    "user": "gounthar",
    "repository": "jenkinsci/solarized-theme-plugin",
    "pluginName": "solarized-theme",
    "labels": null,
    "url": "https://github.com/jenkinsci/solarized-theme-plugin/pull/79",
    "description": "Hello solarized-theme developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T14:20:49Z",
    "updatedAt": "2025-02-14T13:21:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/split-admin-plugin",
    "pluginName": "split-admin",
    "labels": null,
    "url": "https://github.com/jenkinsci/split-admin-plugin/pull/4",
    "description": "Hello split-admin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T14:11:43Z",
    "updatedAt": "2025-02-14T13:12:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/stackrox-container-image-scanner-plugin",
    "pluginName": "stackrox-container-image-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/stackrox-container-image-scanner-plugin/pull/1",
    "description": "Hello stackrox-container-image-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 189,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T14:03:01Z",
    "updatedAt": "2025-02-14T13:03:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/stash-pullrequest-builder-plugin",
    "pluginName": "stash-pullrequest-builder",
    "labels": null,
    "url": "https://github.com/jenkinsci/stash-pullrequest-builder-plugin/pull/189",
    "description": "Hello stash-pullrequest-builder developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 55,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:56:09Z",
    "updatedAt": "2025-03-13T19:02:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/statuspage-gating-plugin",
    "pluginName": "statuspage-gating",
    "labels": null,
    "url": "https://github.com/jenkinsci/statuspage-gating-plugin/pull/55",
    "description": "Hello statuspage-gating developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:47:12Z",
    "updatedAt": "2025-02-14T12:46:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/teams-webhook-trigger-plugin",
    "pluginName": "teams-webhook-trigger",
    "labels": null,
    "url": "https://github.com/jenkinsci/teams-webhook-trigger-plugin/pull/5",
    "description": "Hello teams-webhook-trigger developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 15,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "CLOSED",
    "createdAt": "2025-01-29T13:44:52Z",
    "updatedAt": "2025-02-14T16:56:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/vmanager-plugin",
    "pluginName": "vmanager-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/vmanager-plugin/pull/15",
    "description": "Hello vmanager-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 362,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-29T13:41:57Z",
    "updatedAt": "2025-03-14T12:28:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/tekton-client-plugin",
    "pluginName": "tekton-client",
    "labels": null,
    "url": "https://github.com/jenkinsci/tekton-client-plugin/pull/362",
    "description": "Hello tekton-client developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:33:15Z",
    "updatedAt": "2025-02-14T12:36:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/testcafe-plugin",
    "pluginName": "testcafe",
    "labels": null,
    "url": "https://github.com/jenkinsci/testcafe-plugin/pull/5",
    "description": "Hello testcafe developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 22,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:26:37Z",
    "updatedAt": "2025-02-14T12:30:20Z",
    "user": "gounthar",
    "repository": "jenkinsci/testflo-for-jira-test-management-automation-plugin",
    "pluginName": "testflo-for-jira-test-management-automation",
    "labels": null,
    "url": "https://github.com/jenkinsci/testflo-for-jira-test-management-automation-plugin/pull/22",
    "description": "Hello testflo-for-jira-test-management-automation developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 20,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:11:20Z",
    "updatedAt": "2025-02-14T12:17:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/thycotic-devops-secrets-vault-plugin",
    "pluginName": "thycotic-devops-secrets-vault",
    "labels": null,
    "url": "https://github.com/jenkinsci/thycotic-devops-secrets-vault-plugin/pull/20",
    "description": "Hello thycotic-devops-secrets-vault developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 38,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:06:07Z",
    "updatedAt": "2025-02-14T12:12:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/thycotic-secret-server-plugin",
    "pluginName": "thycotic-secret-server",
    "labels": null,
    "url": "https://github.com/jenkinsci/thycotic-secret-server-plugin/pull/38",
    "description": "Hello thycotic-secret-server developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 108,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:00:12Z",
    "updatedAt": "2025-02-14T12:07:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/typetalk-plugin",
    "pluginName": "typetalk",
    "labels": null,
    "url": "https://github.com/jenkinsci/typetalk-plugin/pull/108",
    "description": "Hello typetalk developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 16,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T12:52:35Z",
    "updatedAt": "2025-02-14T11:59:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/uleska-plugin",
    "pluginName": "uleska",
    "labels": null,
    "url": "https://github.com/jenkinsci/uleska-plugin/pull/16",
    "description": "Hello uleska developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 22,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T12:45:03Z",
    "updatedAt": "2025-02-14T11:52:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/upload-build-to-sofy-plugin",
    "pluginName": "upload-build-to-sofy",
    "labels": null,
    "url": "https://github.com/jenkinsci/upload-build-to-sofy-plugin/pull/22",
    "description": "Hello upload-build-to-sofy developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 12,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T12:41:20Z",
    "updatedAt": "2025-02-14T11:47:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/upload-pgyer-plugin",
    "pluginName": "upload-pgyer",
    "labels": null,
    "url": "https://github.com/jenkinsci/upload-pgyer-plugin/pull/12",
    "description": "Hello upload-pgyer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T11:17:38Z",
    "updatedAt": "2025-02-14T11:36:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/vdoo-vision-plugin",
    "pluginName": "vdoo-vision",
    "labels": null,
    "url": "https://github.com/jenkinsci/vdoo-vision-plugin/pull/4",
    "description": "Hello vdoo-vision developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 50,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T11:08:28Z",
    "updatedAt": "2025-02-14T11:18:33Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualexpert-plugin",
    "pluginName": "visualexpert",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualexpert-plugin/pull/50",
    "description": "Hello visualexpert developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 83,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T11:00:37Z",
    "updatedAt": "2025-02-14T11:02:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/vstestrunner-plugin",
    "pluginName": "vstestrunner",
    "labels": null,
    "url": "https://github.com/jenkinsci/vstestrunner-plugin/pull/83",
    "description": "Hello vstestrunner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T10:49:21Z",
    "updatedAt": "2025-02-14T10:51:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/wetest-automation-plugin",
    "pluginName": "wetest-automation",
    "labels": null,
    "url": "https://github.com/jenkinsci/wetest-automation-plugin/pull/3",
    "description": "Hello wetest-automation developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 2,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T10:35:26Z",
    "updatedAt": "2025-02-14T10:38:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/wsap-plugin",
    "pluginName": "wsap",
    "labels": null,
    "url": "https://github.com/jenkinsci/wsap-plugin/pull/2",
    "description": "Hello wsap developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 161,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T10:27:48Z",
    "updatedAt": "2025-02-14T10:31:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/xcode-plugin",
    "pluginName": "xcode-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/xcode-plugin/pull/161",
    "description": "Hello xcode-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 27,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-29T10:18:16Z",
    "updatedAt": "2025-02-04T15:19:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/yet-another-build-visualizer-plugin",
    "pluginName": "yet-another-build-visualizer",
    "labels": null,
    "url": "https://github.com/jenkinsci/yet-another-build-visualizer-plugin/pull/27",
    "description": "Hello yet-another-build-visualizer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 49,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T10:12:23Z",
    "updatedAt": "2025-02-14T10:09:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/zap-pipeline-plugin",
    "pluginName": "zap-pipeline",
    "labels": null,
    "url": "https://github.com/jenkinsci/zap-pipeline-plugin/pull/49",
    "description": "Hello zap-pipeline developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T10:04:37Z",
    "updatedAt": "2025-02-14T09:56:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/zerobug-plugin",
    "pluginName": "zerobug",
    "labels": null,
    "url": "https://github.com/jenkinsci/zerobug-plugin/pull/8",
    "description": "Hello zerobug developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 20,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T10:00:36Z",
    "updatedAt": "2025-02-14T09:50:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/zoom-plugin",
    "pluginName": "zoom",
    "labels": null,
    "url": "https://github.com/jenkinsci/zoom-plugin/pull/20",
    "description": "Hello zoom developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 61,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T09:56:09Z",
    "updatedAt": "2025-02-14T09:42:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/zscaler-iac-scan-plugin",
    "pluginName": "zscaler-iac-scan",
    "labels": null,
    "url": "https://github.com/jenkinsci/zscaler-iac-scan-plugin/pull/61",
    "description": "Hello zscaler-iac-scan developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 191,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-01-29T05:35:30Z",
    "updatedAt": "2025-02-22T20:13:42Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/trilead-api-plugin",
    "pluginName": "trilead-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/trilead-api-plugin/pull/191",
    "description": "Hello trilead-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 21,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-28T14:52:16Z",
    "updatedAt": "2025-01-28T14:52:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/onepassword-secrets-plugin",
    "pluginName": "onepassword-secrets",
    "labels": null,
    "url": "https://github.com/jenkinsci/onepassword-secrets-plugin/pull/21",
    "description": "Hello onepassword-secrets developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-01-28T10:27:25Z",
    "updatedAt": "2025-03-27T22:16:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonargraph-integration-plugin",
    "pluginName": "sonargraph-integration",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonargraph-integration-plugin/pull/11",
    "description": "Hello sonargraph-integration developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-01-27T18:18:57Z",
    "updatedAt": "2025-01-30T21:11:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/send-stacktrace-to-eclipse-plugin",
    "pluginName": "send-stacktrace-to-eclipse-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/send-stacktrace-to-eclipse-plugin/pull/11",
    "description": "Hello send-stacktrace-to-eclipse-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 27,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-27T14:33:10Z",
    "updatedAt": "2025-03-28T15:19:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/appspider-build-scanner-plugin",
    "pluginName": "jenkinsci-appspider-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/appspider-build-scanner-plugin/pull/27",
    "description": "Hello jenkinsci-appspider-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 20,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-27T13:26:22Z",
    "updatedAt": "2025-03-28T14:03:29Z",
    "user": "gounthar",
    "repository": "jenkinsci/mqtt-notification-plugin",
    "pluginName": "mqtt-notification-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/mqtt-notification-plugin/pull/20",
    "description": "Hello mqtt-notification-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 4,
    "title": "chore(pom): Require 2.462.3",
    "state": "MERGED",
    "createdAt": "2025-01-26T12:16:54Z",
    "updatedAt": "2025-02-05T03:34:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-input-notification-plugin",
    "pluginName": "pipeline-input-notification",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-input-notification-plugin/pull/4",
    "description": "Hello pipeline-input-notification developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 114,
    "title": "Require 2.426.3",
    "state": "OPEN",
    "createdAt": "2025-01-26T12:10:28Z",
    "updatedAt": "2025-01-26T16:14:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/spotinst-plugin",
    "pluginName": "spotinst",
    "labels": null,
    "url": "https://github.com/jenkinsci/spotinst-plugin/pull/114",
    "description": "Hello spotinst developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-26T12:03:31Z",
    "updatedAt": "2025-01-26T12:03:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/srcclr-installer-plugin",
    "pluginName": "srcclr-installer",
    "labels": null,
    "url": "https://github.com/jenkinsci/srcclr-installer-plugin/pull/4",
    "description": "Hello srcclr-installer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 7,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-26T11:53:55Z",
    "updatedAt": "2025-01-26T11:53:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/stoplightio-report-plugin",
    "pluginName": "stoplightio-report",
    "labels": null,
    "url": "https://github.com/jenkinsci/stoplightio-report-plugin/pull/7",
    "description": "Hello stoplightio-report developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 56,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-26T10:47:26Z",
    "updatedAt": "2025-04-14T16:41:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/vectorcast-execution-plugin",
    "pluginName": "vectorcast-execution",
    "labels": null,
    "url": "https://github.com/jenkinsci/vectorcast-execution-plugin/pull/56",
    "description": "Hello vectorcast-execution developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 3,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T21:52:31Z",
    "updatedAt": "2025-01-25T21:52:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/partyparrotstatus-plugin",
    "pluginName": "partyparrotstatus",
    "labels": null,
    "url": "https://github.com/jenkinsci/partyparrotstatus-plugin/pull/3",
    "description": "Hello partyparrotstatus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 9,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T21:17:43Z",
    "updatedAt": "2025-01-25T21:17:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/qmetry-test-management-plugin",
    "pluginName": "qmetry-test-management",
    "labels": null,
    "url": "https://github.com/jenkinsci/qmetry-test-management-plugin/pull/9",
    "description": "Hello qmetry-test-management developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 12,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T21:14:32Z",
    "updatedAt": "2025-03-28T12:33:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/qtest-plugin",
    "pluginName": "qtest",
    "labels": null,
    "url": "https://github.com/jenkinsci/qtest-plugin/pull/12",
    "description": "Hello qtest developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 33,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T20:56:44Z",
    "updatedAt": "2025-01-25T20:56:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/redgate-sql-ci-plugin",
    "pluginName": "redgate-sql-ci",
    "labels": null,
    "url": "https://github.com/jenkinsci/redgate-sql-ci-plugin/pull/33",
    "description": "Hello redgate-sql-ci developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 6,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T20:45:02Z",
    "updatedAt": "2025-01-25T20:45:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/runscope-plugin",
    "pluginName": "runscope",
    "labels": null,
    "url": "https://github.com/jenkinsci/runscope-plugin/pull/6",
    "description": "Hello runscope developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-01-25T20:39:57Z",
    "updatedAt": "2025-08-06T11:28:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/safe-batch-environment-filter-plugin",
    "pluginName": "safe-batch-environment-filter",
    "labels": null,
    "url": "https://github.com/jenkinsci/safe-batch-environment-filter-plugin/pull/5",
    "description": "Hello safe-batch-environment-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 2,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T20:16:14Z",
    "updatedAt": "2025-01-25T20:16:14Z",
    "user": "gounthar",
    "repository": "jenkinsci/sensedia-api-platform-plugin",
    "pluginName": "sensedia-api-platform",
    "labels": null,
    "url": "https://github.com/jenkinsci/sensedia-api-platform-plugin/pull/2",
    "description": "Hello sensedia-api-platform developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 3,
    "title": "chore(pom): Require 2.462.3",
    "state": "MERGED",
    "createdAt": "2025-01-25T20:06:14Z",
    "updatedAt": "2025-02-01T17:07:18Z",
    "user": "gounthar",
    "repository": "jenkinsci/signal-killer",
    "pluginName": "signal-killer",
    "labels": null,
    "url": "https://github.com/jenkinsci/signal-killer/pull/3",
    "description": "Hello signal-killer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 22,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T19:58:51Z",
    "updatedAt": "2025-01-25T19:58:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/sitemonitor-plugin",
    "pluginName": "sitemonitor",
    "labels": null,
    "url": "https://github.com/jenkinsci/sitemonitor-plugin/pull/22",
    "description": "Hello sitemonitor developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 22,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T19:50:24Z",
    "updatedAt": "2025-03-28T11:32:29Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonarqube-plugin",
    "pluginName": "sonar",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonarqube-plugin/pull/22",
    "description": "Hello sonar developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 10,
    "title": "chore(pom): Require 2.462.3",
    "state": "MERGED",
    "createdAt": "2025-01-25T19:40:33Z",
    "updatedAt": "2025-01-28T08:33:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonargraph-integration-plugin",
    "pluginName": "sonargraph-integration",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonargraph-integration-plugin/pull/10",
    "description": "Hello sonargraph-integration developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T19:36:33Z",
    "updatedAt": "2025-01-25T19:36:33Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonarqube-generic-coverage-plugin",
    "pluginName": "sonarqube-generic-coverage",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonarqube-generic-coverage-plugin/pull/2",
    "description": "Hello sonarqube-generic-coverage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 113,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T19:30:34Z",
    "updatedAt": "2025-03-28T11:18:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/spotinst-plugin",
    "pluginName": "spotinst",
    "labels": null,
    "url": "https://github.com/jenkinsci/spotinst-plugin/pull/113",
    "description": "Hello spotinst developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 3,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T19:24:51Z",
    "updatedAt": "2025-01-25T19:24:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/srcclr-installer-plugin",
    "pluginName": "srcclr-installer",
    "labels": null,
    "url": "https://github.com/jenkinsci/srcclr-installer-plugin/pull/3",
    "description": "Hello srcclr-installer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 6,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T19:17:25Z",
    "updatedAt": "2025-01-25T19:17:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/stoplightio-report-plugin",
    "pluginName": "stoplightio-report",
    "labels": null,
    "url": "https://github.com/jenkinsci/stoplightio-report-plugin/pull/6",
    "description": "Hello stoplightio-report developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 11,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T18:59:45Z",
    "updatedAt": "2025-03-28T10:44:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/testingbot-plugin",
    "pluginName": "testingbot",
    "labels": null,
    "url": "https://github.com/jenkinsci/testingbot-plugin/pull/11",
    "description": "Hello testingbot developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 14,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T18:55:49Z",
    "updatedAt": "2025-01-25T18:55:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/testodyssey-execution-plugin",
    "pluginName": "testodyssey-execution",
    "labels": null,
    "url": "https://github.com/jenkinsci/testodyssey-execution-plugin/pull/14",
    "description": "Hello testodyssey-execution developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 7,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T18:51:24Z",
    "updatedAt": "2025-01-25T18:51:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/testquality-updater-plugin",
    "pluginName": "testquality-updater",
    "labels": null,
    "url": "https://github.com/jenkinsci/testquality-updater-plugin/pull/7",
    "description": "Hello testquality-updater developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T18:47:40Z",
    "updatedAt": "2025-03-28T10:33:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/testsigma-plugin",
    "pluginName": "testsigma",
    "labels": null,
    "url": "https://github.com/jenkinsci/testsigma-plugin/pull/9",
    "description": "Hello testsigma developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 29,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T18:28:25Z",
    "updatedAt": "2025-03-28T10:18:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/unity3d-plugin",
    "pluginName": "unity3d-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/unity3d-plugin/pull/29",
    "description": "Hello unity3d-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 15,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T18:23:24Z",
    "updatedAt": "2025-01-25T18:23:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/vagrant-plugin",
    "pluginName": "vagrant",
    "labels": null,
    "url": "https://github.com/jenkinsci/vagrant-plugin/pull/15",
    "description": "Hello vagrant developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 20,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T18:11:19Z",
    "updatedAt": "2025-03-28T10:07:07Z",
    "user": "gounthar",
    "repository": "jenkinsci/vectorcast-coverage-plugin",
    "pluginName": "vectorcast-coverage",
    "labels": null,
    "url": "https://github.com/jenkinsci/vectorcast-coverage-plugin/pull/20",
    "description": "Hello vectorcast-coverage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T17:57:05Z",
    "updatedAt": "2025-03-27T21:01:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/7",
    "description": "Hello visualworks-store developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 13,
    "title": "chore(pom): Require 2.462.3",
    "state": "MERGED",
    "createdAt": "2025-01-25T17:53:08Z",
    "updatedAt": "2025-01-29T14:10:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/vmanager-plugin",
    "pluginName": "vmanager-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/vmanager-plugin/pull/13",
    "description": "Hello vmanager-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-25T17:39:08Z",
    "updatedAt": "2025-03-28T09:30:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/vncviewer-plugin",
    "pluginName": "vncviewer",
    "labels": null,
    "url": "https://github.com/jenkinsci/vncviewer-plugin/pull/8",
    "description": "Hello vncviewer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 2,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T17:31:03Z",
    "updatedAt": "2025-01-25T17:31:03Z",
    "user": "gounthar",
    "repository": "jenkinsci/webhook-eventsource-plugin",
    "pluginName": "webhook-eventsource",
    "labels": null,
    "url": "https://github.com/jenkinsci/webhook-eventsource-plugin/pull/2",
    "description": "Hello webhook-eventsource developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 2,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T17:27:21Z",
    "updatedAt": "2025-01-25T17:27:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/webload-plugin",
    "pluginName": "webload",
    "labels": null,
    "url": "https://github.com/jenkinsci/webload-plugin/pull/2",
    "description": "Hello webload developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 6,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "MERGED",
    "createdAt": "2025-01-25T14:45:51Z",
    "updatedAt": "2025-01-27T17:42:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/send-stacktrace-to-eclipse-plugin",
    "pluginName": "send-stacktrace-to-eclipse-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/send-stacktrace-to-eclipse-plugin/pull/6",
    "description": "Hello send-stacktrace-to-eclipse-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 5,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-01-25T14:42:26Z",
    "updatedAt": "2025-01-27T17:40:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/send-stacktrace-to-eclipse-plugin",
    "pluginName": "send-stacktrace-to-eclipse-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/send-stacktrace-to-eclipse-plugin/pull/5",
    "description": "Hello send-stacktrace-to-eclipse-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "chore(pom): Require 2.462.3",
    "state": "MERGED",
    "createdAt": "2025-01-25T14:37:02Z",
    "updatedAt": "2025-01-27T17:34:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/send-stacktrace-to-eclipse-plugin",
    "pluginName": "send-stacktrace-to-eclipse-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/send-stacktrace-to-eclipse-plugin/pull/4",
    "description": "Hello send-stacktrace-to-eclipse-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThanks for taking the time to review this PR. 🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-25T08:55:37Z",
    "updatedAt": "2025-02-08T15:08:06Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jsoup-plugin",
    "pluginName": "jsoup",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jsoup-plugin/pull/4",
    "description": "Hello jsoup developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 3,
    "title": "feat(ci): Builds on the Jenkins Infrastructure",
    "state": "MERGED",
    "createdAt": "2025-01-25T08:52:23Z",
    "updatedAt": "2025-01-25T11:07:35Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/send-stacktrace-to-eclipse-plugin",
    "pluginName": "send-stacktrace-to-eclipse-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/send-stacktrace-to-eclipse-plugin/pull/3",
    "description": "Hello send-stacktrace-to-eclipse-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java 11 and 17.\nThere will come a time when we no longer support plugins built with JDK 8 or 11.\nAfter this PR is merged, we will submit additional automated PRs to enable your plugin to build with Java 17 and 21.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 8,
    "title": "Applied recipe FixJellyIssues",
    "state": "OPEN",
    "createdAt": "2025-01-24T10:27:29Z",
    "updatedAt": "2025-01-24T10:36:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/report-info-plugin",
    "pluginName": "report-info",
    "labels": null,
    "url": "https://github.com/jenkinsci/report-info-plugin/pull/8",
    "description": "Hello report-info developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add XML declaration to Jelly files and create index.jelly if it doesn't exist\n    io.jenkins.tools.pluginmodernizer.FixJellyIssues\n    Ensure the XML declaration `\u003c?jelly escape-by-default='true'?\u003e` is present in all `.jelly` files and create index.jelly if it doesn't exist.\n\nTesting\nThe checks should go green after #5 is merged.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-01-24T10:06:36Z",
    "updatedAt": "2025-01-24T10:15:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/report-info-plugin",
    "pluginName": "report-info",
    "labels": null,
    "url": "https://github.com/jenkinsci/report-info-plugin/pull/7",
    "description": "Hello report-info developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nTesting\nThe checks should go green after #5 is merged.\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin. By automating this process with Dependabot, you open the door to a host of advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures your plugin stays at the cutting edge by promptly updating it with the latest features and improvements from upstream libraries.\n\n\nStrengthen Security: Staying current with dependency updates is critical for security. Dependabot automatically flags and updates any vulnerable dependencies, helping to shield your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating. Dependabot automatically submits pull requests for new releases, allowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates enhance both performance and compatibility with other plugins and the Jenkins core, ensuring a smooth experience for your users.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, while it takes care of keeping everything up-to-date under the hood.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with the best practices in the industry. We invite you to test these updates and embrace a maintenance workflow that is efficient and secure.\nYour insights and feedback are invaluable to us, and we'll be here to support you through this transition as needed.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-01-24T10:00:24Z",
    "updatedAt": "2025-01-24T10:05:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/report-info-plugin",
    "pluginName": "report-info",
    "labels": null,
    "url": "https://github.com/jenkinsci/report-info-plugin/pull/6",
    "description": "Hello report-info developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nThe checks should go green after #5 is merged.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-24T09:49:41Z",
    "updatedAt": "2025-03-27T19:11:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/report-info-plugin",
    "pluginName": "report-info",
    "labels": null,
    "url": "https://github.com/jenkinsci/report-info-plugin/pull/5",
    "description": "Hello report-info developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-01-23T19:14:00Z",
    "updatedAt": "2025-01-23T19:14:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/wavefront-plugin",
    "pluginName": "wavefront",
    "labels": null,
    "url": "https://github.com/jenkinsci/wavefront-plugin/pull/4",
    "description": "Hello wavefront developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 6,
    "title": "chore(github): Add CODEOWNERS",
    "state": "CLOSED",
    "createdAt": "2025-01-23T13:22:52Z",
    "updatedAt": "2025-08-04T20:31:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/environment-filter-utils-plugin",
    "pluginName": "environment-filter-utils",
    "labels": null,
    "url": "https://github.com/jenkinsci/environment-filter-utils-plugin/pull/6",
    "description": "Hello environment-filter-utils developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 12,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-01-23T09:32:10Z",
    "updatedAt": "2025-01-23T15:40:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/appdynamics-plugin",
    "pluginName": "appdynamics-dashboard",
    "labels": null,
    "url": "https://github.com/jenkinsci/appdynamics-plugin/pull/12",
    "description": "Hello appdynamics-dashboard developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 11,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "MERGED",
    "createdAt": "2025-01-23T09:27:52Z",
    "updatedAt": "2025-01-23T14:53:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/appdynamics-plugin",
    "pluginName": "appdynamics-dashboard",
    "labels": null,
    "url": "https://github.com/jenkinsci/appdynamics-plugin/pull/11",
    "description": "Hello appdynamics-dashboard developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin. By automating this process with Dependabot, you open the door to a host of advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures your plugin stays at the cutting edge by promptly updating it with the latest features and improvements from upstream libraries.\n\n\nStrengthen Security: Staying current with dependency updates is critical for security. Dependabot automatically flags and updates any vulnerable dependencies, helping to shield your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating. Dependabot automatically submits pull requests for new releases, allowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates enhance both performance and compatibility with other plugins and the Jenkins core, ensuring a smooth experience for your users.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, while it takes care of keeping everything up-to-date under the hood.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with the best practices in the industry. We invite you to test these updates and embrace a maintenance workflow that is efficient and secure.\nYour insights and feedback are invaluable to us, and we'll be here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 10,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T22:17:51Z",
    "updatedAt": "2025-01-26T15:28:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/testingbot-plugin",
    "pluginName": "testingbot",
    "labels": null,
    "url": "https://github.com/jenkinsci/testingbot-plugin/pull/10",
    "description": "Hello testingbot developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 13,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T22:15:02Z",
    "updatedAt": "2025-01-26T11:31:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/testodyssey-execution-plugin",
    "pluginName": "testodyssey-execution",
    "labels": null,
    "url": "https://github.com/jenkinsci/testodyssey-execution-plugin/pull/13",
    "description": "Hello testodyssey-execution developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 6,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T22:11:53Z",
    "updatedAt": "2025-01-26T11:27:20Z",
    "user": "gounthar",
    "repository": "jenkinsci/testquality-updater-plugin",
    "pluginName": "testquality-updater",
    "labels": null,
    "url": "https://github.com/jenkinsci/testquality-updater-plugin/pull/6",
    "description": "Hello testquality-updater developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 8,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T22:08:22Z",
    "updatedAt": "2025-01-26T15:19:58Z",
    "user": "gounthar",
    "repository": "jenkinsci/testsigma-plugin",
    "pluginName": "testsigma",
    "labels": null,
    "url": "https://github.com/jenkinsci/testsigma-plugin/pull/8",
    "description": "Hello testsigma developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 28,
    "title": "Require 2.426",
    "state": "OPEN",
    "createdAt": "2025-01-22T21:54:11Z",
    "updatedAt": "2025-01-26T15:03:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/unity3d-plugin",
    "pluginName": "unity3d-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/unity3d-plugin/pull/28",
    "description": "Hello unity3d-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 14,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T21:50:13Z",
    "updatedAt": "2025-01-26T11:00:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/vagrant-plugin",
    "pluginName": "vagrant",
    "labels": null,
    "url": "https://github.com/jenkinsci/vagrant-plugin/pull/14",
    "description": "Hello vagrant developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 55,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-22T21:39:14Z",
    "updatedAt": "2025-01-24T14:45:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/vectorcast-execution-plugin",
    "pluginName": "vectorcast-execution",
    "labels": null,
    "url": "https://github.com/jenkinsci/vectorcast-execution-plugin/pull/55",
    "description": "Hello vectorcast-execution developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 15,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T21:34:32Z",
    "updatedAt": "2025-01-26T10:43:07Z",
    "user": "gounthar",
    "repository": "jenkinsci/view26-plugin",
    "pluginName": "view26",
    "labels": null,
    "url": "https://github.com/jenkinsci/view26-plugin/pull/15",
    "description": "Hello view26 developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 6,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-22T21:27:58Z",
    "updatedAt": "2025-01-25T23:08:47Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/6",
    "description": "Hello visualworks-store developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 12,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-22T21:24:22Z",
    "updatedAt": "2025-01-29T14:10:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/vmanager-plugin",
    "pluginName": "vmanager-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/vmanager-plugin/pull/12",
    "description": "Hello vmanager-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 7,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T21:13:00Z",
    "updatedAt": "2025-01-26T14:24:30Z",
    "user": "gounthar",
    "repository": "jenkinsci/vncviewer-plugin",
    "pluginName": "vncviewer",
    "labels": null,
    "url": "https://github.com/jenkinsci/vncviewer-plugin/pull/7",
    "description": "Hello vncviewer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 3,
    "title": "Require 2.361.4",
    "state": "OPEN",
    "createdAt": "2025-01-22T21:08:47Z",
    "updatedAt": "2025-01-26T14:19:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/wavefront-plugin",
    "pluginName": "wavefront",
    "labels": null,
    "url": "https://github.com/jenkinsci/wavefront-plugin/pull/3",
    "description": "Hello wavefront developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T21:05:49Z",
    "updatedAt": "2025-01-26T10:12:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/webhook-eventsource-plugin",
    "pluginName": "webhook-eventsource",
    "labels": null,
    "url": "https://github.com/jenkinsci/webhook-eventsource-plugin/pull/1",
    "description": "Hello webhook-eventsource developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T21:01:44Z",
    "updatedAt": "2025-01-26T10:08:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/webload-plugin",
    "pluginName": "webload",
    "labels": null,
    "url": "https://github.com/jenkinsci/webload-plugin/pull/1",
    "description": "Hello webload developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 10,
    "title": "feat(ci): Builds on the Jenkins Infrastructure",
    "state": "MERGED",
    "createdAt": "2025-01-22T20:25:47Z",
    "updatedAt": "2025-01-23T09:15:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/appdynamics-plugin",
    "pluginName": "appdynamics-dashboard",
    "labels": null,
    "url": "https://github.com/jenkinsci/appdynamics-plugin/pull/10",
    "description": "Hello appdynamics-dashboard developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nStarting with the Jenkins 2.463 weekly release, Jenkins now requires Java 17 or newer.\nThe first Long-Term Support (LTS) release requiring Java 17 or newer (version 2.479.x) was released at the end of October 2024.\nThe Jenkins core team strongly recommends that all users adopt either Java 17 or Java 21.\nThe adoption of Java 17 has almost surpassed that of Java 11, and the usage of Java 21 is rapidly increasing.\nThere will come a time when we no longer support plugins built with JDK 8 or 11.\nWhile this PR does not automatically make your plugin compatible with Java 17 or 21, it represents the first step towards a new era. Your plugin will be built and tested within the Jenkins infrastructure using Java 17 and 21.\nAfter this PR is merged, we will submit additional automated PRs to enable your plugin to build with Java 17 and 21.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T20:10:26Z",
    "updatedAt": "2025-01-26T12:16:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonarqube-generic-coverage-plugin",
    "pluginName": "sonarqube-generic-coverage",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonarqube-generic-coverage-plugin/pull/1",
    "description": "Hello sonarqube-generic-coverage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 9,
    "title": "Require 2.440.3",
    "state": "MERGED",
    "createdAt": "2025-01-22T20:06:25Z",
    "updatedAt": "2025-01-27T18:24:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonargraph-integration-plugin",
    "pluginName": "sonargraph-integration",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonargraph-integration-plugin/pull/9",
    "description": "Hello sonargraph-integration developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 21,
    "title": "Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T20:01:47Z",
    "updatedAt": "2025-01-26T16:38:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonarqube-plugin",
    "pluginName": "sonar",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonarqube-plugin/pull/21",
    "description": "Hello sonar developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 21,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T19:46:46Z",
    "updatedAt": "2025-01-26T12:40:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/sitemonitor-plugin",
    "pluginName": "sitemonitor",
    "labels": null,
    "url": "https://github.com/jenkinsci/sitemonitor-plugin/pull/21",
    "description": "Hello sitemonitor developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 2,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-22T19:40:17Z",
    "updatedAt": "2025-02-01T17:08:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/signal-killer",
    "pluginName": "signal-killer",
    "labels": null,
    "url": "https://github.com/jenkinsci/signal-killer/pull/2",
    "description": "Hello signal-killer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T19:32:11Z",
    "updatedAt": "2025-01-26T12:57:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/sensedia-api-platform-plugin",
    "pluginName": "sensedia-api-platform",
    "labels": null,
    "url": "https://github.com/jenkinsci/sensedia-api-platform-plugin/pull/1",
    "description": "Hello sensedia-api-platform developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 2,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-22T19:28:44Z",
    "updatedAt": "2025-01-25T08:26:18Z",
    "user": "gounthar",
    "repository": "jenkinsci/send-stacktrace-to-eclipse-plugin",
    "pluginName": "send-stacktrace-to-eclipse-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/send-stacktrace-to-eclipse-plugin/pull/2",
    "description": "Hello send-stacktrace-to-eclipse-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-22T19:11:01Z",
    "updatedAt": "2025-08-06T11:28:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/safe-batch-environment-filter-plugin",
    "pluginName": "safe-batch-environment-filter",
    "labels": null,
    "url": "https://github.com/jenkinsci/safe-batch-environment-filter-plugin/pull/4",
    "description": "Hello safe-batch-environment-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 5,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T19:07:20Z",
    "updatedAt": "2025-01-26T13:22:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/runscope-plugin",
    "pluginName": "runscope",
    "labels": null,
    "url": "https://github.com/jenkinsci/runscope-plugin/pull/5",
    "description": "Hello runscope developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "MERGED",
    "createdAt": "2025-01-22T19:01:13Z",
    "updatedAt": "2025-01-24T09:42:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/report-info-plugin",
    "pluginName": "report-info",
    "labels": null,
    "url": "https://github.com/jenkinsci/report-info-plugin/pull/4",
    "description": "Hello report-info developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 32,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T18:38:11Z",
    "updatedAt": "2025-01-26T13:34:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/redgate-sql-ci-plugin",
    "pluginName": "redgate-sql-ci",
    "labels": null,
    "url": "https://github.com/jenkinsci/redgate-sql-ci-plugin/pull/32",
    "description": "Hello redgate-sql-ci developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 11,
    "title": "Require 2.426.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T18:23:07Z",
    "updatedAt": "2025-01-26T17:51:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/qtest-plugin",
    "pluginName": "qtest",
    "labels": null,
    "url": "https://github.com/jenkinsci/qtest-plugin/pull/11",
    "description": "Hello qtest developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 8,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T18:21:00Z",
    "updatedAt": "2025-01-22T18:21:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/qmetry-test-management-plugin",
    "pluginName": "qmetry-test-management",
    "labels": null,
    "url": "https://github.com/jenkinsci/qmetry-test-management-plugin/pull/8",
    "description": "Hello qmetry-test-management developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 25,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T18:18:15Z",
    "updatedAt": "2025-01-22T18:18:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/qmetry-for-jira-test-management-plugin",
    "pluginName": "qmetry-for-jira-test-management",
    "labels": null,
    "url": "https://github.com/jenkinsci/qmetry-for-jira-test-management-plugin/pull/25",
    "description": "Hello qmetry-for-jira-test-management developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 2,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-01-22T17:53:01Z",
    "updatedAt": "2025-01-25T22:06:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/partyparrotstatus-plugin",
    "pluginName": "partyparrotstatus",
    "labels": null,
    "url": "https://github.com/jenkinsci/partyparrotstatus-plugin/pull/2",
    "description": "Hello partyparrotstatus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 9,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T17:47:55Z",
    "updatedAt": "2025-01-22T17:47:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/parallels-desktop-plugin",
    "pluginName": "parallels-desktop",
    "labels": null,
    "url": "https://github.com/jenkinsci/parallels-desktop-plugin/pull/9",
    "description": "Hello parallels-desktop developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T17:04:49Z",
    "updatedAt": "2025-01-22T17:04:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/mttr-plugin",
    "pluginName": "mttr",
    "labels": null,
    "url": "https://github.com/jenkinsci/mttr-plugin/pull/4",
    "description": "Hello mttr developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T17:01:21Z",
    "updatedAt": "2025-01-22T17:01:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/msginject-plugin",
    "pluginName": "msginject",
    "labels": null,
    "url": "https://github.com/jenkinsci/msginject-plugin/pull/4",
    "description": "Hello msginject developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 19,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T16:58:07Z",
    "updatedAt": "2025-01-22T16:58:07Z",
    "user": "gounthar",
    "repository": "jenkinsci/mqtt-notification-plugin",
    "pluginName": "mqtt-notification-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/mqtt-notification-plugin/pull/19",
    "description": "Hello mqtt-notification-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 10,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T16:54:02Z",
    "updatedAt": "2025-01-22T16:54:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/mission-control-view-plugin",
    "pluginName": "mission-control-view",
    "labels": null,
    "url": "https://github.com/jenkinsci/mission-control-view-plugin/pull/10",
    "description": "Hello mission-control-view developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 5,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T16:50:34Z",
    "updatedAt": "2025-01-22T16:50:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/metrics-graphite-plugin",
    "pluginName": "metrics-graphite",
    "labels": null,
    "url": "https://github.com/jenkinsci/metrics-graphite-plugin/pull/5",
    "description": "Hello metrics-graphite developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 73,
    "title": "Require 2.361.4",
    "state": "MERGED",
    "createdAt": "2025-01-22T16:34:50Z",
    "updatedAt": "2025-03-25T14:26:29Z",
    "user": "gounthar",
    "repository": "jenkinsci/lucene-search-plugin",
    "pluginName": "lucene-search",
    "labels": null,
    "url": "https://github.com/jenkinsci/lucene-search-plugin/pull/73",
    "description": "Hello lucene-search developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T16:27:34Z",
    "updatedAt": "2025-01-22T16:27:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/loadcomplete-plugin",
    "pluginName": "loadcomplete",
    "labels": null,
    "url": "https://github.com/jenkinsci/loadcomplete-plugin/pull/7",
    "description": "Hello loadcomplete developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 5,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T16:21:19Z",
    "updatedAt": "2025-01-22T16:21:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/lifx-notifier-plugin",
    "pluginName": "lifx-notifier",
    "labels": null,
    "url": "https://github.com/jenkinsci/lifx-notifier-plugin/pull/5",
    "description": "Hello lifx-notifier developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 17,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T16:08:17Z",
    "updatedAt": "2025-01-22T16:08:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/kiuwan-plugin",
    "pluginName": "kiuwanJenkinsPlugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/kiuwan-plugin/pull/17",
    "description": "Hello kiuwanJenkinsPlugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 54,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-22T15:39:05Z",
    "updatedAt": "2025-01-22T15:39:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/walldisplay-plugin",
    "pluginName": "jenkinswalldisplay",
    "labels": null,
    "url": "https://github.com/jenkinsci/walldisplay-plugin/pull/54",
    "description": "Hello jenkinswalldisplay developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 26,
    "title": "Require 2.375.1",
    "state": "OPEN",
    "createdAt": "2025-01-22T15:35:17Z",
    "updatedAt": "2025-01-22T15:35:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/appspider-build-scanner-plugin",
    "pluginName": "jenkinsci-appspider-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/appspider-build-scanner-plugin/pull/26",
    "description": "Hello jenkinsci-appspider-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 16,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "CLOSED",
    "createdAt": "2025-02-27T16:33:51Z",
    "updatedAt": "2025-05-08T13:06:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/42crunch-security-audit-plugin",
    "pluginName": "42crunch-security-audit",
    "labels": null,
    "url": "https://github.com/jenkinsci/42crunch-security-audit-plugin/pull/16",
    "description": "Hello 42crunch-security-audit developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 32,
    "title": "Fix non-https repository URLs in pom.xml",
    "state": "CLOSED",
    "createdAt": "2025-02-27T08:17:31Z",
    "updatedAt": "2025-06-25T07:40:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/blackduck-security-scan-plugin",
    "pluginName": "blackduck-security-scan",
    "labels": null,
    "url": "https://github.com/jenkinsci/blackduck-security-scan-plugin/pull/32",
    "description": "The goal of this PR is to update pom.xml to use https instead of http for repository URLs. The use of http is currently blocking me when attempting to update this plugin to use JDK 17, because of the following error:\n\nFound non-https repository URL in pom file preventing maven older than 3.8.1\nAlthough you are using a more recent version of Maven through mvnw, the tool I use (plugin-modernizer) relies on Maven directly.\n\nUpdates in pom.xml:\n\nChanged the repository URL with the id bds-artifactory to use an HTTPS URL ${repoReleaseArtifactoryUrl}.\nChanged the snapshot repository URL with the id bds-artifactory in the profile with the id snapshot-deployment to use an HTTPS URL ${snapshotArtifactoryUrl}.\nChanged the repository URL with the id bds-artifactory in the profile with the id deployment to use an HTTPS URL ${releaseArtifactoryUrl}.\nChanged the repository URL with the id bds-artifactory in the profile with the id qa-deployment to use an HTTPS URL ${qaArtifactoryUrl}.\nChanged the snapshot repository URL with the id bds-artifactory in the profile with the id qa-deployment to use an HTTPS URL ${snapshotArtifactoryUrl}.\n\nTesting done\nmvn clean verify\nSubmitter checklist\n\n Make sure you are opening from a topic/feature/bugfix branch (right side) and not your main branch!\n Ensure that the pull request title represents the desired changelog entry\n Please describe what you did\n Link to relevant issues in GitHub or Jira\n Link to relevant pull requests, esp. upstream and downstream changes\n Ensure you have provided tests - that demonstrates feature works or fixes the issue",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-26T17:49:05Z",
    "updatedAt": "2025-02-26T17:59:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/snowsoftware-commander-plugin",
    "pluginName": "embotics-vcommander",
    "labels": null,
    "url": "https://github.com/jenkinsci/snowsoftware-commander-plugin/pull/4",
    "description": "Hello embotics-vcommander developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!\nSupersedes #3 .",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 193,
    "title": "feat(java): Require Jenkins core 2.479.3.",
    "state": "MERGED",
    "createdAt": "2025-02-25T17:41:04Z",
    "updatedAt": "2025-02-25T18:12:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/msbuild-plugin",
    "pluginName": "msbuild",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/msbuild-plugin/pull/193",
    "description": "Hello msbuild developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 57,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-02-25T15:58:51Z",
    "updatedAt": "2025-03-29T03:31:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/dagshub-branch-source-plugin",
    "pluginName": "dagshub-branch-source",
    "labels": null,
    "url": "https://github.com/jenkinsci/dagshub-branch-source-plugin/pull/57",
    "description": "Hello dagshub-branch-source developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 67,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-25T13:17:17Z",
    "updatedAt": "2025-02-25T13:17:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/sectioned-view-plugin",
    "pluginName": "sectioned-view",
    "labels": null,
    "url": "https://github.com/jenkinsci/sectioned-view-plugin/pull/67",
    "description": "Hello sectioned-view developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nThis could help #64 to pass checks, or even become redundant.\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 187,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-25T10:51:50Z",
    "updatedAt": "2025-02-27T00:08:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/job-restrictions-plugin",
    "pluginName": "job-restrictions",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/jenkinsci/job-restrictions-plugin/pull/187",
    "description": "Hello job-restrictions developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 83,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-25T10:06:07Z",
    "updatedAt": "2025-02-25T13:05:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/artifactdeployer-plugin",
    "pluginName": "artifactdeployer",
    "labels": [
      "dependencies",
      "feature"
    ],
    "url": "https://github.com/jenkinsci/artifactdeployer-plugin/pull/83",
    "description": "Hello artifactdeployer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 18,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-02-25T08:30:22Z",
    "updatedAt": "2025-02-25T08:30:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-global-lib-nexus-plugin",
    "pluginName": "pipeline-global-lib-nexus",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-global-lib-nexus-plugin/pull/18",
    "description": "Hello pipeline-global-lib-nexus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 17,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-02-25T08:26:56Z",
    "updatedAt": "2025-02-25T08:26:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-global-lib-nexus-plugin",
    "pluginName": "pipeline-global-lib-nexus",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-global-lib-nexus-plugin/pull/17",
    "description": "Hello pipeline-global-lib-nexus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 43,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-25T03:42:02Z",
    "updatedAt": "2025-02-25T04:03:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-sqlserver-plugin",
    "pluginName": "database-sqlserver",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/database-sqlserver-plugin/pull/43",
    "description": "Hello database-sqlserver developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 28,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-02-24T19:47:21Z",
    "updatedAt": "2025-02-24T19:47:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/28",
    "description": "Hello ansible-tower developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 27,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-02-24T19:32:58Z",
    "updatedAt": "2025-07-02T18:29:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/27",
    "description": "Hello ansible-tower developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 26,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-02-24T19:30:04Z",
    "updatedAt": "2025-02-24T19:30:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/26",
    "description": "Hello ansible-tower developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 31,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "MERGED",
    "createdAt": "2025-02-24T18:29:24Z",
    "updatedAt": "2025-06-17T08:58:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/yet-another-build-visualizer-plugin",
    "pluginName": "yet-another-build-visualizer",
    "labels": null,
    "url": "https://github.com/jenkinsci/yet-another-build-visualizer-plugin/pull/31",
    "description": "Hello yet-another-build-visualizer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 30,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-02-24T18:24:56Z",
    "updatedAt": "2025-06-17T08:59:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/yet-another-build-visualizer-plugin",
    "pluginName": "yet-another-build-visualizer",
    "labels": null,
    "url": "https://github.com/jenkinsci/yet-another-build-visualizer-plugin/pull/30",
    "description": "Hello yet-another-build-visualizer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 52,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-24T15:28:26Z",
    "updatedAt": "2025-02-24T15:33:58Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/sqlserver-api-plugin",
    "pluginName": "sqlserver-api",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/sqlserver-api-plugin/pull/52",
    "description": "Hello sqlserver-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 152,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-24T10:55:55Z",
    "updatedAt": "2025-02-24T14:14:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/junit-attachments-plugin",
    "pluginName": "junit-attachments",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/junit-attachments-plugin/pull/152",
    "description": "Hello junit-attachments developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-23T06:38:36Z",
    "updatedAt": "2025-02-23T06:44:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jcaptcha-plugin",
    "pluginName": "jcaptcha-plugin",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jcaptcha-plugin/pull/7",
    "description": "Hello jcaptcha-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 121,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T20:49:28Z",
    "updatedAt": "2025-03-05T14:58:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-disk-usage-simple-plugin",
    "pluginName": "cloudbees-disk-usage-simple",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/cloudbees-disk-usage-simple-plugin/pull/121",
    "description": "Hello cloudbees-disk-usage-simple developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 245,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:57:23Z",
    "updatedAt": "2025-02-22T19:13:16Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/245",
    "description": "Hello skip-notifications-trait developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 361,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:55:36Z",
    "updatedAt": "2025-02-22T19:13:41Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/postgresql-fingerprint-storage-plugin",
    "pluginName": "postgresql-fingerprint-storage",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/postgresql-fingerprint-storage-plugin/pull/361",
    "description": "Hello postgresql-fingerprint-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 187,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:51:58Z",
    "updatedAt": "2025-02-22T19:14:08Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-npm-plugin",
    "pluginName": "pipeline-npm",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/pipeline-npm-plugin/pull/187",
    "description": "Hello pipeline-npm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 119,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:50:26Z",
    "updatedAt": "2025-02-22T19:14:39Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/parameter-separator-plugin",
    "pluginName": "parameter-separator",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/parameter-separator-plugin/pull/119",
    "description": "Hello parameter-separator developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 246,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:48:17Z",
    "updatedAt": "2025-02-22T19:17:17Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openshift-k8s-credentials-plugin",
    "pluginName": "openshift-k8s-credentials",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/openshift-k8s-credentials-plugin/pull/246",
    "description": "Hello openshift-k8s-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 143,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:46:20Z",
    "updatedAt": "2025-02-22T19:16:15Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/nunit-plugin",
    "pluginName": "nunit",
    "labels": [
      "dependencies",
      "enhancement"
    ],
    "url": "https://github.com/jenkinsci/nunit-plugin/pull/143",
    "description": "Hello nunit developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 164,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:44:06Z",
    "updatedAt": "2025-02-22T18:01:22Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/164",
    "description": "Hello next-executions developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 137,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:42:10Z",
    "updatedAt": "2025-02-22T19:12:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/login-theme-plugin",
    "pluginName": "login-theme",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/login-theme-plugin/pull/137",
    "description": "Hello login-theme developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 287,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:40:37Z",
    "updatedAt": "2025-02-22T18:00:30Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/locale-plugin",
    "pluginName": "locale",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/locale-plugin/pull/287",
    "description": "Hello locale developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 399,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:38:06Z",
    "updatedAt": "2025-02-22T17:59:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-plugin",
    "pluginName": "jobcacher",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-plugin/pull/399",
    "description": "Hello jobcacher developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 189,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:33:39Z",
    "updatedAt": "2025-02-22T17:58:07Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/hidden-parameter-plugin",
    "pluginName": "hidden-parameter",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/hidden-parameter-plugin/pull/189",
    "description": "Hello hidden-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 220,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:31:58Z",
    "updatedAt": "2025-02-22T19:11:43Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitlab-kubernetes-credentials-plugin",
    "pluginName": "gitlab-kubernetes-credentials",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/gitlab-kubernetes-credentials-plugin/pull/220",
    "description": "Hello gitlab-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 108,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:30:02Z",
    "updatedAt": "2025-02-22T19:11:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/flyway-runner-plugin",
    "pluginName": "flyway-runner",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/flyway-runner-plugin/pull/108",
    "description": "Hello flyway-runner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 155,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:27:45Z",
    "updatedAt": "2025-02-22T19:10:52Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/155",
    "description": "Hello file-operations developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 142,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:25:17Z",
    "updatedAt": "2025-02-22T19:16:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "enhancement",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/142",
    "description": "Hello extra-tool-installers developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 121,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:23:59Z",
    "updatedAt": "2025-02-22T19:17:43Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extension-filter-plugin",
    "pluginName": "extension-filter",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/extension-filter-plugin/pull/121",
    "description": "Hello extension-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 72,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:22:13Z",
    "updatedAt": "2025-02-22T19:19:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mariadb-plugin",
    "pluginName": "database-mariadb",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-mariadb-plugin/pull/72",
    "description": "Hello database-mariadb developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 87,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:20:37Z",
    "updatedAt": "2025-02-24T19:31:17Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/coverage-badges-extension-plugin",
    "pluginName": "coverage-badges-extension",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/coverage-badges-extension-plugin/pull/87",
    "description": "Hello coverage-badges-extension developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 269,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:19:15Z",
    "updatedAt": "2025-02-22T19:18:46Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/269",
    "description": "Hello bitbucket-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 100,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:17:16Z",
    "updatedAt": "2025-02-22T19:18:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-artifact-manager-plugin",
    "pluginName": "artifactory-artifact-manager",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-artifact-manager-plugin/pull/100",
    "description": "Hello artifactory-artifact-manager developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 244,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:22:08Z",
    "updatedAt": "2025-02-22T17:00:35Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/244",
    "description": "Hello skip-notifications-trait developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 186,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:19:22Z",
    "updatedAt": "2025-02-22T17:00:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-npm-plugin",
    "pluginName": "pipeline-npm",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-npm-plugin/pull/186",
    "description": "Hello pipeline-npm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 245,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:15:47Z",
    "updatedAt": "2025-02-22T17:00:20Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openshift-k8s-credentials-plugin",
    "pluginName": "openshift-k8s-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/openshift-k8s-credentials-plugin/pull/245",
    "description": "Hello openshift-k8s-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 163,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:13:07Z",
    "updatedAt": "2025-02-22T17:00:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/163",
    "description": "Hello next-executions developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 62,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:11:15Z",
    "updatedAt": "2025-02-22T17:00:06Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/mariadb-api-plugin",
    "pluginName": "mariadb-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/mariadb-api-plugin/pull/62",
    "description": "Hello mariadb-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 108,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:08:31Z",
    "updatedAt": "2025-02-22T16:59:58Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jnr-posix-api-plugin",
    "pluginName": "jnr-posix-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jnr-posix-api-plugin/pull/108",
    "description": "Hello jnr-posix-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 79,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:07:10Z",
    "updatedAt": "2025-02-22T16:59:52Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/79",
    "description": "Hello json-path-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 69,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:05:56Z",
    "updatedAt": "2025-02-22T16:59:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/69",
    "description": "Hello json-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 63,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:04:41Z",
    "updatedAt": "2025-02-22T16:59:37Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/63",
    "description": "Hello joda-time-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 188,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:00:53Z",
    "updatedAt": "2025-02-22T19:30:05Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/hidden-parameter-plugin",
    "pluginName": "hidden-parameter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/hidden-parameter-plugin/pull/188",
    "description": "Hello hidden-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 66,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:59:13Z",
    "updatedAt": "2025-02-22T16:59:23Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/66",
    "description": "Hello gson-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 219,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:57:55Z",
    "updatedAt": "2025-02-22T16:59:16Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitlab-kubernetes-credentials-plugin",
    "pluginName": "gitlab-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gitlab-kubernetes-credentials-plugin/pull/219",
    "description": "Hello gitlab-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 154,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:51:46Z",
    "updatedAt": "2025-02-22T16:59:08Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/154",
    "description": "Hello file-operations developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 141,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:49:16Z",
    "updatedAt": "2025-02-22T16:59:01Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/141",
    "description": "Hello extra-tool-installers developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 71,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:46:31Z",
    "updatedAt": "2025-02-22T16:58:53Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mariadb-plugin",
    "pluginName": "database-mariadb",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-mariadb-plugin/pull/71",
    "description": "Hello database-mariadb developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 22,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:43:27Z",
    "updatedAt": "2025-02-22T16:58:46Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/commons-math3-api-plugin",
    "pluginName": "commons-math3-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/commons-math3-api-plugin/pull/22",
    "description": "Hello commons-math3-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 69,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:42:17Z",
    "updatedAt": "2025-02-22T16:58:40Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/byte-buddy-api-plugin",
    "pluginName": "byte-buddy-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/byte-buddy-api-plugin/pull/69",
    "description": "Hello byte-buddy-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 70,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:39:50Z",
    "updatedAt": "2025-02-22T16:58:33Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/70",
    "description": "Hello asm-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 47,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:38:26Z",
    "updatedAt": "2025-02-22T16:58:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/47",
    "description": "Hello artifactory-client-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 10,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-21T14:50:23Z",
    "updatedAt": "2025-03-05T21:23:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/railflow-testrail-plugin",
    "pluginName": "railflow-testrail",
    "labels": null,
    "url": "https://github.com/jenkinsci/railflow-testrail-plugin/pull/10",
    "description": "Hello railflow-testrail developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 14,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "MERGED",
    "createdAt": "2025-02-20T14:14:20Z",
    "updatedAt": "2025-02-24T14:38:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/deepcrawl-test-plugin",
    "pluginName": "deepcrawl-test",
    "labels": null,
    "url": "https://github.com/jenkinsci/deepcrawl-test-plugin/pull/14",
    "description": "Hello deepcrawl-test developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 13,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-20T14:11:30Z",
    "updatedAt": "2025-05-29T15:56:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/deepcrawl-test-plugin",
    "pluginName": "deepcrawl-test",
    "labels": null,
    "url": "https://github.com/jenkinsci/deepcrawl-test-plugin/pull/13",
    "description": "Hello deepcrawl-test developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 113,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-20T10:01:22Z",
    "updatedAt": "2025-02-20T21:52:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-cloudwatch-logs-plugin",
    "pluginName": "pipeline-cloudwatch-logs",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-cloudwatch-logs-plugin/pull/113",
    "description": "Hello pipeline-cloudwatch-logs developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 158,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-19T19:36:12Z",
    "updatedAt": "2025-02-19T19:40:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/log-cli-plugin",
    "pluginName": "log-cli",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/log-cli-plugin/pull/158",
    "description": "Hello log-cli developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 144,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-19T19:24:35Z",
    "updatedAt": "2025-04-01T08:25:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/groovy-events-listener-plugin",
    "pluginName": "groovy-events-listener-plugin",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/jenkinsci/groovy-events-listener-plugin/pull/144",
    "description": "Hello groovy-events-listener-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:47:52Z",
    "updatedAt": "2025-02-19T18:47:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/black-duck-sigma-plugin",
    "pluginName": "black-duck-sigma",
    "labels": null,
    "url": "https://github.com/jenkinsci/black-duck-sigma-plugin/pull/4",
    "description": "Hello black-duck-sigma developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:44:24Z",
    "updatedAt": "2025-02-19T18:44:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/black-duck-sigma-plugin",
    "pluginName": "black-duck-sigma",
    "labels": null,
    "url": "https://github.com/jenkinsci/black-duck-sigma-plugin/pull/3",
    "description": "Hello black-duck-sigma developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 268,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-19T18:34:43Z",
    "updatedAt": "2025-02-19T19:43:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/268",
    "description": "Hello bitbucket-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:27:53Z",
    "updatedAt": "2025-02-19T18:27:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/appknox-scanner-plugin",
    "pluginName": "appknox-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/appknox-scanner-plugin/pull/7",
    "description": "Hello appknox-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 6,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:19:52Z",
    "updatedAt": "2025-02-19T18:19:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/appknox-scanner-plugin",
    "pluginName": "appknox-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/appknox-scanner-plugin/pull/6",
    "description": "Hello appknox-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-30T01:04:33Z",
    "updatedAt": "2025-06-13T14:28:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-devoptics-enabler-plugin",
    "pluginName": "cloudbees-devoptics-enabler",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudbees-devoptics-enabler-plugin/pull/7",
    "description": "Hello cloudbees-devoptics-enabler developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-30T00:43:22Z",
    "updatedAt": "2025-07-02T21:00:03Z",
    "user": "gounthar",
    "repository": "jenkinsci/buildrotator-plugin",
    "pluginName": "buildrotator",
    "labels": null,
    "url": "https://github.com/jenkinsci/buildrotator-plugin/pull/9",
    "description": "Hello buildrotator developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-30T00:36:50Z",
    "updatedAt": "2025-07-02T20:54:30Z",
    "user": "gounthar",
    "repository": "jenkinsci/build-token-trigger-plugin",
    "pluginName": "build-token-trigger",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-token-trigger-plugin/pull/5",
    "description": "Hello build-token-trigger developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 25,
    "title": "feat(java): Require Jenkins core 2.479 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-30T00:17:31Z",
    "updatedAt": "2025-07-02T20:33:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-pullrequest-builder-plugin",
    "pluginName": "bitbucket-pullrequest-builder",
    "labels": null,
    "url": "https://github.com/jenkinsci/bitbucket-pullrequest-builder-plugin/pull/25",
    "description": "Hello bitbucket-pullrequest-builder developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-30T00:01:12Z",
    "updatedAt": "2025-07-02T20:17:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/azure-event-grid-notifier-plugin",
    "pluginName": "azure-event-grid-notifier",
    "labels": null,
    "url": "https://github.com/jenkinsci/azure-event-grid-notifier-plugin/pull/8",
    "description": "Hello azure-event-grid-notifier developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 31,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-29T23:26:14Z",
    "updatedAt": "2025-07-02T19:36:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/aws-device-farm-plugin",
    "pluginName": "aws-device-farm",
    "labels": null,
    "url": "https://github.com/jenkinsci/aws-device-farm-plugin/pull/31",
    "description": "Hello aws-device-farm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-29T23:05:28Z",
    "updatedAt": "2025-07-02T19:10:33Z",
    "user": "gounthar",
    "repository": "jenkinsci/autoaction-step-plugin",
    "pluginName": "autoaction-step",
    "labels": null,
    "url": "https://github.com/jenkinsci/autoaction-step-plugin/pull/2",
    "description": "Hello autoaction-step developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-29T22:55:25Z",
    "updatedAt": "2025-07-02T18:55:47Z",
    "user": "gounthar",
    "repository": "jenkinsci/arestocats-plugin",
    "pluginName": "arestocats",
    "labels": null,
    "url": "https://github.com/jenkinsci/arestocats-plugin/pull/6",
    "description": "Hello arestocats developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-29T22:46:24Z",
    "updatedAt": "2025-07-02T18:42:20Z",
    "user": "gounthar",
    "repository": "jenkinsci/apprenda-plugin",
    "pluginName": "apprenda",
    "labels": null,
    "url": "https://github.com/jenkinsci/apprenda-plugin/pull/2",
    "description": "Hello apprenda developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-29T22:28:02Z",
    "updatedAt": "2025-07-02T18:25:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/aliyun-oss-uploader-plugin",
    "pluginName": "aliyun-oss-uploader",
    "labels": null,
    "url": "https://github.com/jenkinsci/aliyun-oss-uploader-plugin/pull/10",
    "description": "Hello aliyun-oss-uploader developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-29T21:44:46Z",
    "updatedAt": "2025-07-02T17:42:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/adaptive-disconnector-plugin",
    "pluginName": "adaptive-disconnector",
    "labels": null,
    "url": "https://github.com/jenkinsci/adaptive-disconnector-plugin/pull/10",
    "description": "Hello adaptive-disconnector developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-29T21:32:38Z",
    "updatedAt": "2025-07-02T17:39:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/Matrix-sorter-plugin",
    "pluginName": "Matrix-sorter-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/Matrix-sorter-plugin/pull/4",
    "description": "Hello Matrix-sorter-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-03-29T20:22:41Z",
    "updatedAt": "2025-03-29T22:22:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/createjobadvanced-plugin",
    "pluginName": "createjobadvanced",
    "labels": null,
    "url": "https://github.com/jenkinsci/createjobadvanced-plugin/pull/11",
    "description": "Hello createjobadvanced developers! 👋\nMay take precedence and fix #10.\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 157,
    "title": "Add GitHub Actions CI workflow ",
    "state": "MERGED",
    "createdAt": "2025-03-29T18:32:47Z",
    "updatedAt": "2025-04-01T09:27:35Z",
    "user": "splusb",
    "repository": "jenkinsci/log-parser-plugin",
    "pluginName": "log-parser",
    "labels": null,
    "url": "https://github.com/jenkinsci/log-parser-plugin/pull/157",
    "description": "Description\nThis PR introduces a GitHub Actions-based CI workflow to the develop branch of the log-parser-plugin.\nKey additions:\n\nAdds .github/workflows/ci.yml for continuous integration\nBuilds the plugin using Java 11 and Maven\nRuns static analysis checks via PMD\nEnsures future changes are automatically validated on push and PR\n\nAdditionally, the plugin has been tested using the Jenkins Plugin Compat Tester (PCT) to ensure compatibility with the latest Jenkins core.\n\nRelevant issues\nNone opened — this is part of general modernization effort aligned with GSoC 2025 Plugin Modernizer Improvements.\n\nType of change\n\n New feature (adds CI functionality)\n Bug fix\n Breaking change\n Documentation update\n\n\nHow Has This Been Tested?\n✅ CI workflow triggered successfully on push and pull_request events for the develop branch\n✅ Build and PMD checks passed on GitHub Actions using Java 11\n✅ Verified plugin compatibility with Jenkins core 2.440 using Plugin Compat Tester\nPCT command:\ndocker run --rm \\\n  -v \"$PWD\":/plugin \\\n  jenkins/plugin-compat-tester \\\n  -Dplugin=log-parser-plugin \\\n  -DreportFile=target/pct-report.xml",
    "checkStatus": "FAILURE"
  },
  {
    "number": 63,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:38:04Z",
    "updatedAt": "2025-03-29T16:38:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/zscaler-iac-scan-plugin",
    "pluginName": "zscaler-iac-scan",
    "labels": null,
    "url": "https://github.com/jenkinsci/zscaler-iac-scan-plugin/pull/63",
    "description": "Hello zscaler-iac-scan developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 22,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:35:03Z",
    "updatedAt": "2025-04-01T20:15:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/zoom-plugin",
    "pluginName": "zoom",
    "labels": null,
    "url": "https://github.com/jenkinsci/zoom-plugin/pull/22",
    "description": "Hello zoom developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:32:21Z",
    "updatedAt": "2025-03-29T16:32:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/zerobug-plugin",
    "pluginName": "zerobug",
    "labels": null,
    "url": "https://github.com/jenkinsci/zerobug-plugin/pull/10",
    "description": "Hello zerobug developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 51,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:29:36Z",
    "updatedAt": "2025-03-29T16:29:36Z",
    "user": "gounthar",
    "repository": "jenkinsci/zap-pipeline-plugin",
    "pluginName": "zap-pipeline",
    "labels": null,
    "url": "https://github.com/jenkinsci/zap-pipeline-plugin/pull/51",
    "description": "Hello zap-pipeline developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 32,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:24:39Z",
    "updatedAt": "2025-03-29T16:24:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/yet-another-build-visualizer-plugin",
    "pluginName": "yet-another-build-visualizer",
    "labels": null,
    "url": "https://github.com/jenkinsci/yet-another-build-visualizer-plugin/pull/32",
    "description": "Hello yet-another-build-visualizer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:19:45Z",
    "updatedAt": "2025-04-01T20:03:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/xooa-plugin",
    "pluginName": "xooa",
    "labels": null,
    "url": "https://github.com/jenkinsci/xooa-plugin/pull/3",
    "description": "Hello xooa developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 163,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:15:43Z",
    "updatedAt": "2025-03-29T16:15:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/xcode-plugin",
    "pluginName": "xcode-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/xcode-plugin/pull/163",
    "description": "Hello xcode-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 48,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:07:40Z",
    "updatedAt": "2025-03-29T16:07:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/working-hours-plugin",
    "pluginName": "working-hours",
    "labels": null,
    "url": "https://github.com/jenkinsci/working-hours-plugin/pull/48",
    "description": "Hello working-hours developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T16:04:22Z",
    "updatedAt": "2025-04-01T20:04:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/winrm-client-plugin",
    "pluginName": "winrm-client",
    "labels": null,
    "url": "https://github.com/jenkinsci/winrm-client-plugin/pull/10",
    "description": "Hello winrm-client developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:58:56Z",
    "updatedAt": "2025-03-29T15:58:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/wetest-automation-plugin",
    "pluginName": "wetest-automation",
    "labels": null,
    "url": "https://github.com/jenkinsci/wetest-automation-plugin/pull/5",
    "description": "Hello wetest-automation developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 85,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:49:45Z",
    "updatedAt": "2025-04-01T20:03:36Z",
    "user": "gounthar",
    "repository": "jenkinsci/vstestrunner-plugin",
    "pluginName": "vstestrunner",
    "labels": null,
    "url": "https://github.com/jenkinsci/vstestrunner-plugin/pull/85",
    "description": "Hello vstestrunner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 53,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:45:21Z",
    "updatedAt": "2025-03-29T15:45:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualexpert-plugin",
    "pluginName": "visualexpert",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualexpert-plugin/pull/53",
    "description": "Hello visualexpert developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:36:57Z",
    "updatedAt": "2025-03-29T15:36:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/viber-notification-plugin",
    "pluginName": "viber-notification",
    "labels": null,
    "url": "https://github.com/jenkinsci/viber-notification-plugin/pull/6",
    "description": "Hello viber-notification developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:33:08Z",
    "updatedAt": "2025-03-29T15:33:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/vdoo-vision-plugin",
    "pluginName": "vdoo-vision",
    "labels": null,
    "url": "https://github.com/jenkinsci/vdoo-vision-plugin/pull/6",
    "description": "Hello vdoo-vision developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:29:49Z",
    "updatedAt": "2025-03-29T15:29:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/variables-replace-plugin",
    "pluginName": "variables-replace-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/variables-replace-plugin/pull/5",
    "description": "Hello variables-replace-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 14,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:18:37Z",
    "updatedAt": "2025-03-29T15:18:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/upload-pgyer-plugin",
    "pluginName": "upload-pgyer",
    "labels": null,
    "url": "https://github.com/jenkinsci/upload-pgyer-plugin/pull/14",
    "description": "Hello upload-pgyer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 24,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:16:07Z",
    "updatedAt": "2025-03-29T15:16:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/upload-build-to-sofy-plugin",
    "pluginName": "upload-build-to-sofy",
    "labels": null,
    "url": "https://github.com/jenkinsci/upload-build-to-sofy-plugin/pull/24",
    "description": "Hello upload-build-to-sofy developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 18,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:09:15Z",
    "updatedAt": "2025-03-29T15:09:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/uleska-plugin",
    "pluginName": "uleska",
    "labels": null,
    "url": "https://github.com/jenkinsci/uleska-plugin/pull/18",
    "description": "Hello uleska developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 109,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T15:03:25Z",
    "updatedAt": "2025-03-29T15:03:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/typetalk-plugin",
    "pluginName": "typetalk",
    "labels": null,
    "url": "https://github.com/jenkinsci/typetalk-plugin/pull/109",
    "description": "Hello typetalk developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 22,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:54:05Z",
    "updatedAt": "2025-03-29T14:54:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/thycotic-devops-secrets-vault-plugin",
    "pluginName": "thycotic-devops-secrets-vault",
    "labels": null,
    "url": "https://github.com/jenkinsci/thycotic-devops-secrets-vault-plugin/pull/22",
    "description": "Hello thycotic-devops-secrets-vault developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:49:20Z",
    "updatedAt": "2025-03-29T14:49:20Z",
    "user": "gounthar",
    "repository": "jenkinsci/testweaver-plugin",
    "pluginName": "testweaver",
    "labels": null,
    "url": "https://github.com/jenkinsci/testweaver-plugin/pull/4",
    "description": "Hello testweaver developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:46:26Z",
    "updatedAt": "2025-03-29T14:46:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/teststudiomobiletesting-plugin",
    "pluginName": "teststudiomobiletesting",
    "labels": null,
    "url": "https://github.com/jenkinsci/teststudiomobiletesting-plugin/pull/1",
    "description": "Hello teststudiomobiletesting developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:43:42Z",
    "updatedAt": "2025-03-29T14:43:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/teststudioapitesting-plugin",
    "pluginName": "teststudioapitesting",
    "labels": null,
    "url": "https://github.com/jenkinsci/teststudioapitesting-plugin/pull/1",
    "description": "Hello teststudioapitesting developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:40:13Z",
    "updatedAt": "2025-03-29T14:40:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/teststudio-plugin",
    "pluginName": "teststudio",
    "labels": null,
    "url": "https://github.com/jenkinsci/teststudio-plugin/pull/1",
    "description": "Hello teststudio developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 46,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:37:25Z",
    "updatedAt": "2025-03-29T20:52:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/testlink-plugin",
    "pluginName": "testlink",
    "labels": null,
    "url": "https://github.com/jenkinsci/testlink-plugin/pull/46",
    "description": "Hello testlink developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 24,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:32:04Z",
    "updatedAt": "2025-03-29T14:32:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/testflo-for-jira-test-management-automation-plugin",
    "pluginName": "testflo-for-jira-test-management-automation",
    "labels": null,
    "url": "https://github.com/jenkinsci/testflo-for-jira-test-management-automation-plugin/pull/24",
    "description": "Hello testflo-for-jira-test-management-automation developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 384,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-29T14:23:05Z",
    "updatedAt": "2025-06-18T18:29:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/tekton-client-plugin",
    "pluginName": "tekton-client",
    "labels": null,
    "url": "https://github.com/jenkinsci/tekton-client-plugin/pull/384",
    "description": "Hello tekton-client developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:16:13Z",
    "updatedAt": "2025-03-29T14:16:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/teams-webhook-trigger-plugin",
    "pluginName": "teams-webhook-trigger",
    "labels": null,
    "url": "https://github.com/jenkinsci/teams-webhook-trigger-plugin/pull/7",
    "description": "Hello teams-webhook-trigger developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:13:16Z",
    "updatedAt": "2025-03-29T14:13:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/tanaguru-plugin",
    "pluginName": "tanaguru",
    "labels": null,
    "url": "https://github.com/jenkinsci/tanaguru-plugin/pull/2",
    "description": "Hello tanaguru developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 16,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T14:06:09Z",
    "updatedAt": "2025-03-29T14:06:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/sweagle-plugin",
    "pluginName": "sweagle",
    "labels": null,
    "url": "https://github.com/jenkinsci/sweagle-plugin/pull/16",
    "description": "Hello sweagle developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 191,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T13:58:14Z",
    "updatedAt": "2025-03-29T13:58:14Z",
    "user": "gounthar",
    "repository": "jenkinsci/stash-pullrequest-builder-plugin",
    "pluginName": "stash-pullrequest-builder",
    "labels": null,
    "url": "https://github.com/jenkinsci/stash-pullrequest-builder-plugin/pull/191",
    "description": "Hello stash-pullrequest-builder developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T13:53:55Z",
    "updatedAt": "2025-03-29T13:53:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/stackrox-container-image-scanner-plugin",
    "pluginName": "stackrox-container-image-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/stackrox-container-image-scanner-plugin/pull/3",
    "description": "Hello stackrox-container-image-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T13:40:38Z",
    "updatedAt": "2025-03-29T13:40:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/split-admin-plugin",
    "pluginName": "split-admin",
    "labels": null,
    "url": "https://github.com/jenkinsci/split-admin-plugin/pull/6",
    "description": "Hello split-admin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 84,
    "title": "chore(pom): Use recommended core version 2.479.3, and Java 11.",
    "state": "MERGED",
    "createdAt": "2025-03-29T13:34:44Z",
    "updatedAt": "2025-03-29T17:21:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/solarized-theme-plugin",
    "pluginName": "solarized-theme",
    "labels": null,
    "url": "https://github.com/jenkinsci/solarized-theme-plugin/pull/84",
    "description": "Hello solarized-theme developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.479.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.479.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 38,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T13:30:27Z",
    "updatedAt": "2025-03-29T13:30:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/soapui-pro-functional-testing-plugin",
    "pluginName": "soapui-pro-functional-testing",
    "labels": null,
    "url": "https://github.com/jenkinsci/soapui-pro-functional-testing-plugin/pull/38",
    "description": "Hello soapui-pro-functional-testing developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T13:23:38Z",
    "updatedAt": "2025-03-29T13:23:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/smalltest-plugin",
    "pluginName": "smalltest",
    "labels": null,
    "url": "https://github.com/jenkinsci/smalltest-plugin/pull/4",
    "description": "Hello smalltest developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 53,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T13:19:48Z",
    "updatedAt": "2025-03-29T13:19:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/skenai-plugin",
    "pluginName": "skenai",
    "labels": null,
    "url": "https://github.com/jenkinsci/skenai-plugin/pull/53",
    "description": "Hello skenai developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T13:15:12Z",
    "updatedAt": "2025-03-29T13:15:12Z",
    "user": "gounthar",
    "repository": "jenkinsci/shortcut-job-plugin",
    "pluginName": "shortcut-job",
    "labels": null,
    "url": "https://github.com/jenkinsci/shortcut-job-plugin/pull/11",
    "description": "Hello shortcut-job developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T12:49:42Z",
    "updatedAt": "2025-03-29T12:49:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/sematext-plugin",
    "pluginName": "sematext",
    "labels": null,
    "url": "https://github.com/jenkinsci/sematext-plugin/pull/5",
    "description": "Hello sematext developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 101,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T12:45:08Z",
    "updatedAt": "2025-03-29T12:45:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/select2-api-plugin",
    "pluginName": "select2-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/select2-api-plugin/pull/101",
    "description": "Hello select2-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T12:35:29Z",
    "updatedAt": "2025-03-29T12:35:30Z",
    "user": "gounthar",
    "repository": "jenkinsci/secure-post-script-plugin",
    "pluginName": "secure-post-script",
    "labels": null,
    "url": "https://github.com/jenkinsci/secure-post-script-plugin/pull/4",
    "description": "Hello secure-post-script developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T12:30:12Z",
    "updatedAt": "2025-03-29T12:30:12Z",
    "user": "gounthar",
    "repository": "jenkinsci/sdelements-plugin",
    "pluginName": "sdelements",
    "labels": null,
    "url": "https://github.com/jenkinsci/sdelements-plugin/pull/3",
    "description": "Hello sdelements developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 149,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T12:27:01Z",
    "updatedAt": "2025-03-29T12:27:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/saltstack-plugin",
    "pluginName": "saltstack",
    "labels": null,
    "url": "https://github.com/jenkinsci/saltstack-plugin/pull/149",
    "description": "Hello saltstack developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T12:18:45Z",
    "updatedAt": "2025-03-29T12:18:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/run-condition-extras-plugin",
    "pluginName": "run-condition-extras",
    "labels": null,
    "url": "https://github.com/jenkinsci/run-condition-extras-plugin/pull/5",
    "description": "Hello run-condition-extras developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 23,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T12:15:11Z",
    "updatedAt": "2025-03-29T12:15:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/rpmsign-plugin",
    "pluginName": "rpmsign-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/rpmsign-plugin/pull/23",
    "description": "Hello rpmsign-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 92,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T12:01:17Z",
    "updatedAt": "2025-03-29T12:01:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/repo-plugin",
    "pluginName": "repo",
    "labels": null,
    "url": "https://github.com/jenkinsci/repo-plugin/pull/92",
    "description": "Hello repo developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T11:57:09Z",
    "updatedAt": "2025-03-29T11:57:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/redmine-metrics-report-plugin",
    "pluginName": "redmine-metrics-report",
    "labels": null,
    "url": "https://github.com/jenkinsci/redmine-metrics-report-plugin/pull/1",
    "description": "Hello redmine-metrics-report developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T11:53:09Z",
    "updatedAt": "2025-03-29T11:53:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/rapiddeploy-plugin",
    "pluginName": "rapiddeploy-jenkins",
    "labels": null,
    "url": "https://github.com/jenkinsci/rapiddeploy-plugin/pull/5",
    "description": "Hello rapiddeploy-jenkins developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 38,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-29T11:50:04Z",
    "updatedAt": "2025-04-14T07:42:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/rapid7-insightvm-container-assessment-plugin",
    "pluginName": "rapid7-insightvm-container-assessment",
    "labels": null,
    "url": "https://github.com/jenkinsci/rapid7-insightvm-container-assessment-plugin/pull/38",
    "description": "Hello rapid7-insightvm-container-assessment developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T11:44:59Z",
    "updatedAt": "2025-03-29T11:44:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/radargun-reporting-plugin",
    "pluginName": "radargun-reporting",
    "labels": null,
    "url": "https://github.com/jenkinsci/radargun-reporting-plugin/pull/10",
    "description": "Hello radargun-reporting developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 17,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T11:41:19Z",
    "updatedAt": "2025-03-29T11:41:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/rabbitmq-publisher-plugin",
    "pluginName": "rabbitmq-publisher",
    "labels": null,
    "url": "https://github.com/jenkinsci/rabbitmq-publisher-plugin/pull/17",
    "description": "Hello rabbitmq-publisher developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 13,
    "title": "chore(pom): Use recommended core version 2.479.3, and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-29T11:34:36Z",
    "updatedAt": "2025-07-11T06:43:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/qy-wechat-notification-plugin",
    "pluginName": "qy-wechat-notification",
    "labels": null,
    "url": "https://github.com/jenkinsci/qy-wechat-notification-plugin/pull/13",
    "description": "Hello qy-wechat-notification developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.479.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.479.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T11:23:32Z",
    "updatedAt": "2025-03-29T11:23:32Z",
    "user": "gounthar",
    "repository": "jenkinsci/qiniu-plugin",
    "pluginName": "qiniu",
    "labels": null,
    "url": "https://github.com/jenkinsci/qiniu-plugin/pull/11",
    "description": "Hello qiniu developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T11:12:45Z",
    "updatedAt": "2025-03-29T11:12:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/pureload-plugin",
    "pluginName": "pureload",
    "labels": null,
    "url": "https://github.com/jenkinsci/pureload-plugin/pull/3",
    "description": "Hello pureload developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T11:01:01Z",
    "updatedAt": "2025-03-29T11:01:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/publish-over-dropbox-plugin",
    "pluginName": "publish-over-dropbox",
    "labels": null,
    "url": "https://github.com/jenkinsci/publish-over-dropbox-plugin/pull/9",
    "description": "Hello publish-over-dropbox developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T10:49:22Z",
    "updatedAt": "2025-04-01T10:39:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/project-description-setter-plugin",
    "pluginName": "project-description-setter",
    "labels": null,
    "url": "https://github.com/jenkinsci/project-description-setter-plugin/pull/3",
    "description": "Hello project-description-setter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "MERGED",
    "createdAt": "2025-03-29T10:44:14Z",
    "updatedAt": "2025-08-12T14:45:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/probely-security-plugin",
    "pluginName": "probely-security",
    "labels": null,
    "url": "https://github.com/jenkinsci/probely-security-plugin/pull/9",
    "description": "Hello probely-security developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T10:38:53Z",
    "updatedAt": "2025-04-01T10:39:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/portscanner-plugin",
    "pluginName": "portscanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/portscanner-plugin/pull/3",
    "description": "Hello portscanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 13,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T10:34:16Z",
    "updatedAt": "2025-03-29T10:34:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-reporter-by-redpen-plugin",
    "pluginName": "pipeline-reporter-by-redpen",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-reporter-by-redpen-plugin/pull/13",
    "description": "Hello pipeline-reporter-by-redpen developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 19,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T10:23:47Z",
    "updatedAt": "2025-04-01T10:40:32Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-global-lib-nexus-plugin",
    "pluginName": "pipeline-global-lib-nexus",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-global-lib-nexus-plugin/pull/19",
    "description": "Hello pipeline-global-lib-nexus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T10:14:26Z",
    "updatedAt": "2025-03-29T10:14:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-giphy-api-plugin",
    "pluginName": "pipeline-giphy-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-giphy-api-plugin/pull/7",
    "description": "Hello pipeline-giphy-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T10:10:22Z",
    "updatedAt": "2025-03-29T10:10:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-deploymon-plugin",
    "pluginName": "pipeline-deploymon",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-deploymon-plugin/pull/6",
    "description": "Hello pipeline-deploymon developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T10:06:48Z",
    "updatedAt": "2025-03-29T10:06:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-bamboo-plugin",
    "pluginName": "pipeline-bamboo",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-bamboo-plugin/pull/2",
    "description": "Hello pipeline-bamboo developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T09:49:42Z",
    "updatedAt": "2025-03-29T09:49:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/oversecured-plugin",
    "pluginName": "oversecured",
    "labels": null,
    "url": "https://github.com/jenkinsci/oversecured-plugin/pull/4",
    "description": "Hello oversecured developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 20,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T09:42:12Z",
    "updatedAt": "2025-03-29T09:42:12Z",
    "user": "gounthar",
    "repository": "jenkinsci/ostorlab-plugin",
    "pluginName": "ostorlab",
    "labels": null,
    "url": "https://github.com/jenkinsci/ostorlab-plugin/pull/20",
    "description": "Hello ostorlab developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T09:38:48Z",
    "updatedAt": "2025-03-29T09:38:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/osf-builder-suite-standalone-sonar-linter-plugin",
    "pluginName": "osf-builder-suite-standalone-sonar-linter",
    "labels": null,
    "url": "https://github.com/jenkinsci/osf-builder-suite-standalone-sonar-linter-plugin/pull/3",
    "description": "Hello osf-builder-suite-standalone-sonar-linter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T09:33:04Z",
    "updatedAt": "2025-04-01T10:37:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/osf-builder-suite-for-sfcc-run-job-plugin",
    "pluginName": "osf-builder-suite-for-sfcc-run-job",
    "labels": null,
    "url": "https://github.com/jenkinsci/osf-builder-suite-for-sfcc-run-job-plugin/pull/11",
    "description": "Hello osf-builder-suite-for-sfcc-run-job developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T09:26:02Z",
    "updatedAt": "2025-03-29T09:26:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/opslevel-plugin",
    "pluginName": "opslevel",
    "labels": null,
    "url": "https://github.com/jenkinsci/opslevel-plugin/pull/6",
    "description": "Hello opslevel developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 18,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T09:19:00Z",
    "updatedAt": "2025-03-29T09:19:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/nvm-wrapper-plugin",
    "pluginName": "nvm-wrapper",
    "labels": null,
    "url": "https://github.com/jenkinsci/nvm-wrapper-plugin/pull/18",
    "description": "Hello nvm-wrapper developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T09:10:23Z",
    "updatedAt": "2025-03-29T09:10:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/nuclei-plugin",
    "pluginName": "nuclei",
    "labels": null,
    "url": "https://github.com/jenkinsci/nuclei-plugin/pull/8",
    "description": "Hello nuclei developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:59:10Z",
    "updatedAt": "2025-03-29T08:59:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/nirmata-plugin",
    "pluginName": "nirmata",
    "labels": null,
    "url": "https://github.com/jenkinsci/nirmata-plugin/pull/1",
    "description": "Hello nirmata developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:50:10Z",
    "updatedAt": "2025-03-29T08:50:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/neuro-cucumber-plugin",
    "pluginName": "neuro-cucumber",
    "labels": null,
    "url": "https://github.com/jenkinsci/neuro-cucumber-plugin/pull/5",
    "description": "Hello neuro-cucumber developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:47:26Z",
    "updatedAt": "2025-03-29T08:47:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/netdomain-labeler-plugin",
    "pluginName": "netdomain-labeler",
    "labels": null,
    "url": "https://github.com/jenkinsci/netdomain-labeler-plugin/pull/2",
    "description": "Hello netdomain-labeler developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 98,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:41:17Z",
    "updatedAt": "2025-03-29T08:41:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/muuri-api-plugin",
    "pluginName": "muuri-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/muuri-api-plugin/pull/98",
    "description": "Hello muuri-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:37:59Z",
    "updatedAt": "2025-03-29T08:37:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/multi-branch-priority-sorter-plugin",
    "pluginName": "multi-branch-priority-sorter",
    "labels": null,
    "url": "https://github.com/jenkinsci/multi-branch-priority-sorter-plugin/pull/8",
    "description": "Hello multi-branch-priority-sorter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 12,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:32:42Z",
    "updatedAt": "2025-03-29T08:32:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/modernstatus-plugin",
    "pluginName": "modernstatus",
    "labels": null,
    "url": "https://github.com/jenkinsci/modernstatus-plugin/pull/12",
    "description": "Hello modernstatus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 19,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-29T08:24:04Z",
    "updatedAt": "2025-07-03T07:47:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/metrics-datadog-plugin",
    "pluginName": "metrics-datadog",
    "labels": null,
    "url": "https://github.com/jenkinsci/metrics-datadog-plugin/pull/19",
    "description": "Hello metrics-datadog developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:16:37Z",
    "updatedAt": "2025-03-29T08:16:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/metadefender-plugin",
    "pluginName": "metadefender",
    "labels": null,
    "url": "https://github.com/jenkinsci/metadefender-plugin/pull/3",
    "description": "Hello metadefender developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:14:01Z",
    "updatedAt": "2025-03-29T08:14:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/mergebase-sca-plugin",
    "pluginName": "mergebase-sca",
    "labels": null,
    "url": "https://github.com/jenkinsci/mergebase-sca-plugin/pull/10",
    "description": "Hello mergebase-sca developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:05:40Z",
    "updatedAt": "2025-03-29T08:05:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/logback-nats-appender-plugin",
    "pluginName": "logback-nats-appender",
    "labels": null,
    "url": "https://github.com/jenkinsci/logback-nats-appender-plugin/pull/3",
    "description": "Hello logback-nats-appender developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T08:03:06Z",
    "updatedAt": "2025-03-29T08:03:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/log-command-plugin",
    "pluginName": "log-command",
    "labels": null,
    "url": "https://github.com/jenkinsci/log-command-plugin/pull/4",
    "description": "Hello log-command developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 20,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:58:23Z",
    "updatedAt": "2025-03-29T07:58:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/llvm-cov-plugin",
    "pluginName": "llvm-cov",
    "labels": null,
    "url": "https://github.com/jenkinsci/llvm-cov-plugin/pull/20",
    "description": "Hello llvm-cov developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:55:19Z",
    "updatedAt": "2025-03-29T07:55:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/link-column-plugin",
    "pluginName": "link-column",
    "labels": null,
    "url": "https://github.com/jenkinsci/link-column-plugin/pull/4",
    "description": "Hello link-column developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:48:13Z",
    "updatedAt": "2025-03-29T07:48:14Z",
    "user": "gounthar",
    "repository": "jenkinsci/levo-plugin",
    "pluginName": "levo",
    "labels": null,
    "url": "https://github.com/jenkinsci/levo-plugin/pull/11",
    "description": "Hello levo developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:45:00Z",
    "updatedAt": "2025-03-29T07:45:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/lacework-security-scanner-plugin",
    "pluginName": "lacework-security-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/lacework-security-scanner-plugin/pull/8",
    "description": "Hello lacework-security-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:42:32Z",
    "updatedAt": "2025-03-29T07:42:32Z",
    "user": "gounthar",
    "repository": "jenkinsci/labelled-steps-plugin",
    "pluginName": "labelled-steps",
    "labels": null,
    "url": "https://github.com/jenkinsci/labelled-steps-plugin/pull/5",
    "description": "Hello labelled-steps developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:39:19Z",
    "updatedAt": "2025-03-29T07:39:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/kubesphere-token-auth-plugin",
    "pluginName": "kubesphere-token-auth",
    "labels": null,
    "url": "https://github.com/jenkinsci/kubesphere-token-auth-plugin/pull/4",
    "description": "Hello kubesphere-token-auth developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:27:56Z",
    "updatedAt": "2025-03-29T07:27:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/kafkalogs-plugin",
    "pluginName": "kafkalogs",
    "labels": null,
    "url": "https://github.com/jenkinsci/kafkalogs-plugin/pull/5",
    "description": "Hello kafkalogs developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 74,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:22:17Z",
    "updatedAt": "2025-03-29T07:22:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/jwt-auth-plugin",
    "pluginName": "jwt-auth",
    "labels": null,
    "url": "https://github.com/jenkinsci/jwt-auth-plugin/pull/74",
    "description": "Hello jwt-auth developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T07:08:05Z",
    "updatedAt": "2025-03-29T07:08:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/jdcloud-codedeploy-plugin",
    "pluginName": "jdcloud-codedeploy",
    "labels": null,
    "url": "https://github.com/jenkinsci/jdcloud-codedeploy-plugin/pull/1",
    "description": "Hello jdcloud-codedeploy developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 21,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T06:55:15Z",
    "updatedAt": "2025-03-29T06:55:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/influxdb-query-plugin",
    "pluginName": "influxdb-query",
    "labels": null,
    "url": "https://github.com/jenkinsci/influxdb-query-plugin/pull/21",
    "description": "Hello influxdb-query developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T06:50:06Z",
    "updatedAt": "2025-03-29T06:50:07Z",
    "user": "gounthar",
    "repository": "jenkinsci/immuniweb-plugin",
    "pluginName": "immuniweb",
    "labels": null,
    "url": "https://github.com/jenkinsci/immuniweb-plugin/pull/4",
    "description": "Hello immuniweb developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 133,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-29T06:43:08Z",
    "updatedAt": "2025-06-07T20:41:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/image-tag-parameter-plugin",
    "pluginName": "image-tag-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/image-tag-parameter-plugin/pull/133",
    "description": "Hello image-tag-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 19,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T06:31:06Z",
    "updatedAt": "2025-03-29T06:31:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/wsclean-plugin",
    "pluginName": "hudson-wsclean-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/wsclean-plugin/pull/19",
    "description": "Hello hudson-wsclean-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 93,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T06:28:01Z",
    "updatedAt": "2025-03-29T06:28:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/huaweicloud-ecs-plugin",
    "pluginName": "huaweicloud-ecs",
    "labels": null,
    "url": "https://github.com/jenkinsci/huaweicloud-ecs-plugin/pull/93",
    "description": "Hello huaweicloud-ecs developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T06:22:06Z",
    "updatedAt": "2025-03-29T06:22:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/huaweicloud-credentials-plugin",
    "pluginName": "huaweicloud-credentials",
    "labels": null,
    "url": "https://github.com/jenkinsci/huaweicloud-credentials-plugin/pull/1",
    "description": "Hello huaweicloud-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 22,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T06:12:49Z",
    "updatedAt": "2025-03-29T06:12:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/hashicorp-vault-pipeline-plugin",
    "pluginName": "hashicorp-vault-pipeline",
    "labels": null,
    "url": "https://github.com/jenkinsci/hashicorp-vault-pipeline-plugin/pull/22",
    "description": "Hello hashicorp-vault-pipeline developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 13,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T06:08:17Z",
    "updatedAt": "2025-03-29T06:08:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/habitat-plugin",
    "pluginName": "habitat",
    "labels": null,
    "url": "https://github.com/jenkinsci/habitat-plugin/pull/13",
    "description": "Hello habitat developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 13,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T06:05:02Z",
    "updatedAt": "2025-03-29T06:05:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/grypescanner-plugin",
    "pluginName": "grypescanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/grypescanner-plugin/pull/13",
    "description": "Hello grypescanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:59:57Z",
    "updatedAt": "2025-03-29T05:59:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/gprbuild-plugin",
    "pluginName": "gprbuild",
    "labels": null,
    "url": "https://github.com/jenkinsci/gprbuild-plugin/pull/1",
    "description": "Hello gprbuild developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:54:05Z",
    "updatedAt": "2025-03-29T05:54:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/google-admin-sdk-plugin",
    "pluginName": "google-admin-sdk",
    "labels": null,
    "url": "https://github.com/jenkinsci/google-admin-sdk-plugin/pull/1",
    "description": "Hello google-admin-sdk developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 12,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:45:39Z",
    "updatedAt": "2025-03-29T05:45:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/github-label-filter-plugin",
    "pluginName": "github-label-filter",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-label-filter-plugin/pull/12",
    "description": "Hello github-label-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:42:40Z",
    "updatedAt": "2025-03-29T18:22:03Z",
    "user": "gounthar",
    "repository": "jenkinsci/github-branch-pr-change-filter-plugin",
    "pluginName": "github-branch-pr-change-filter",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-branch-pr-change-filter-plugin/pull/4",
    "description": "Hello github-branch-pr-change-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:36:10Z",
    "updatedAt": "2025-03-29T05:36:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/github-app-kubernetes-credentials-plugin",
    "pluginName": "github-app-kubernetes-credentials",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-app-kubernetes-credentials-plugin/pull/2",
    "description": "Hello github-app-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:31:26Z",
    "updatedAt": "2025-03-29T05:31:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/gitea-pat-kubernetes-credentials-plugin",
    "pluginName": "gitea-pat-kubernetes-credentials",
    "labels": null,
    "url": "https://github.com/jenkinsci/gitea-pat-kubernetes-credentials-plugin/pull/5",
    "description": "Hello gitea-pat-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 103,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:22:33Z",
    "updatedAt": "2025-09-23T08:54:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/git-push-plugin",
    "pluginName": "git-push",
    "labels": null,
    "url": "https://github.com/jenkinsci/git-push-plugin/pull/103",
    "description": "Hello git-push developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:17:55Z",
    "updatedAt": "2025-03-29T05:17:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/ghost-inspector-plugin",
    "pluginName": "ghost-inspector",
    "labels": null,
    "url": "https://github.com/jenkinsci/ghost-inspector-plugin/pull/11",
    "description": "Hello ghost-inspector developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-29T05:14:09Z",
    "updatedAt": "2025-08-04T15:21:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/generic-environment-filters-plugin",
    "pluginName": "generic-environment-filters",
    "labels": null,
    "url": "https://github.com/jenkinsci/generic-environment-filters-plugin/pull/7",
    "description": "Hello generic-environment-filters developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:10:44Z",
    "updatedAt": "2025-03-29T05:10:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/gcloud-sdk-plugin",
    "pluginName": "gcloud-sdk",
    "labels": null,
    "url": "https://github.com/jenkinsci/gcloud-sdk-plugin/pull/11",
    "description": "Hello gcloud-sdk developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 15,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T05:02:10Z",
    "updatedAt": "2025-03-29T05:02:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/form-element-path-plugin",
    "pluginName": "form-element-path",
    "labels": null,
    "url": "https://github.com/jenkinsci/form-element-path-plugin/pull/15",
    "description": "Hello form-element-path developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T04:46:40Z",
    "updatedAt": "2025-03-29T04:46:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/enhanced-metrics-plugin",
    "pluginName": "enhanced-metrics",
    "labels": null,
    "url": "https://github.com/jenkinsci/enhanced-metrics-plugin/pull/7",
    "description": "Hello enhanced-metrics developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T04:43:13Z",
    "updatedAt": "2025-03-29T04:43:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/snowsoftware-commander-plugin",
    "pluginName": "embotics-vcommander",
    "labels": null,
    "url": "https://github.com/jenkinsci/snowsoftware-commander-plugin/pull/5",
    "description": "Hello embotics-vcommander developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T04:30:35Z",
    "updatedAt": "2025-03-29T04:30:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/eagle-tester-plugin",
    "pluginName": "eagle-tester",
    "labels": null,
    "url": "https://github.com/jenkinsci/eagle-tester-plugin/pull/3",
    "description": "Hello eagle-tester developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 17,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T04:23:39Z",
    "updatedAt": "2025-04-01T08:24:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/dtkit-plugin",
    "pluginName": "dtkit-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/dtkit-plugin/pull/17",
    "description": "Hello dtkit developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T04:21:23Z",
    "updatedAt": "2025-04-17T10:10:18Z",
    "user": "gounthar",
    "repository": "jenkinsci/dotnet-as-script-plugin",
    "pluginName": "dotnet-as-script",
    "labels": null,
    "url": "https://github.com/jenkinsci/dotnet-as-script-plugin/pull/4",
    "description": "Hello dotnet-as-script developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T03:38:46Z",
    "updatedAt": "2025-03-29T03:38:46Z",
    "user": "gounthar",
    "repository": "jenkinsci/dbforge-devops-automation-for-sqlserver-plugin",
    "pluginName": "dbforge-devops-automation-for-sqlserver",
    "labels": null,
    "url": "https://github.com/jenkinsci/dbforge-devops-automation-for-sqlserver-plugin/pull/4",
    "description": "Hello dbforge-devops-automation-for-sqlserver developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T03:27:25Z",
    "updatedAt": "2025-03-29T03:27:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/cygwin-process-killer-plugin",
    "pluginName": "cygwin-process-killer",
    "labels": null,
    "url": "https://github.com/jenkinsci/cygwin-process-killer-plugin/pull/2",
    "description": "Hello cygwin-process-killer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 50,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T03:13:55Z",
    "updatedAt": "2025-03-29T03:13:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/cucumber-living-documentation-plugin",
    "pluginName": "cucumber-living-documentation",
    "labels": null,
    "url": "https://github.com/jenkinsci/cucumber-living-documentation-plugin/pull/50",
    "description": "Hello cucumber-living-documentation developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T03:08:03Z",
    "updatedAt": "2025-03-29T03:08:03Z",
    "user": "gounthar",
    "repository": "jenkinsci/crx-content-package-deployer-plugin",
    "pluginName": "crx-content-package-deployer",
    "labels": null,
    "url": "https://github.com/jenkinsci/crx-content-package-deployer-plugin/pull/10",
    "description": "Hello crx-content-package-deployer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T02:50:09Z",
    "updatedAt": "2025-03-29T02:50:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/convert-to-pipeline-plugin",
    "pluginName": "convert-to-pipeline",
    "labels": null,
    "url": "https://github.com/jenkinsci/convert-to-pipeline-plugin/pull/9",
    "description": "Hello convert-to-pipeline developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T02:37:59Z",
    "updatedAt": "2025-03-29T02:37:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/consul-plugin",
    "pluginName": "consul",
    "labels": null,
    "url": "https://github.com/jenkinsci/consul-plugin/pull/2",
    "description": "Hello consul developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 15,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T02:13:22Z",
    "updatedAt": "2025-03-29T02:13:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/compress-buildlog-plugin",
    "pluginName": "compress-buildlog",
    "labels": null,
    "url": "https://github.com/jenkinsci/compress-buildlog-plugin/pull/15",
    "description": "Hello compress-buildlog developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T01:15:38Z",
    "updatedAt": "2025-03-29T01:15:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-devoptics-enabler-plugin",
    "pluginName": "cloudbees-devoptics-enabler",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudbees-devoptics-enabler-plugin/pull/6",
    "description": "Hello cloudbees-devoptics-enabler developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T00:56:22Z",
    "updatedAt": "2025-03-29T00:56:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/buildrotator-plugin",
    "pluginName": "buildrotator",
    "labels": null,
    "url": "https://github.com/jenkinsci/buildrotator-plugin/pull/8",
    "description": "Hello buildrotator developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T00:48:59Z",
    "updatedAt": "2025-03-29T00:48:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/build-token-trigger-plugin",
    "pluginName": "build-token-trigger",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-token-trigger-plugin/pull/4",
    "description": "Hello build-token-trigger developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-29T00:08:18Z",
    "updatedAt": "2025-03-29T00:08:18Z",
    "user": "gounthar",
    "repository": "jenkinsci/azure-event-grid-notifier-plugin",
    "pluginName": "azure-event-grid-notifier",
    "labels": null,
    "url": "https://github.com/jenkinsci/azure-event-grid-notifier-plugin/pull/7",
    "description": "Hello azure-event-grid-notifier developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 30,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T23:33:30Z",
    "updatedAt": "2025-03-28T23:33:30Z",
    "user": "gounthar",
    "repository": "jenkinsci/aws-device-farm-plugin",
    "pluginName": "aws-device-farm",
    "labels": null,
    "url": "https://github.com/jenkinsci/aws-device-farm-plugin/pull/30",
    "description": "Hello aws-device-farm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T23:09:50Z",
    "updatedAt": "2025-03-28T23:09:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/autoaction-step-plugin",
    "pluginName": "autoaction-step",
    "labels": null,
    "url": "https://github.com/jenkinsci/autoaction-step-plugin/pull/1",
    "description": "Hello autoaction-step developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 1,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T22:49:40Z",
    "updatedAt": "2025-03-28T22:49:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/apprenda-plugin",
    "pluginName": "apprenda",
    "labels": null,
    "url": "https://github.com/jenkinsci/apprenda-plugin/pull/1",
    "description": "Hello apprenda developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T22:24:53Z",
    "updatedAt": "2025-03-31T08:45:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/aliyun-oss-uploader-plugin",
    "pluginName": "aliyun-oss-uploader",
    "labels": null,
    "url": "https://github.com/jenkinsci/aliyun-oss-uploader-plugin/pull/9",
    "description": "Hello aliyun-oss-uploader developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T21:29:34Z",
    "updatedAt": "2025-03-31T08:42:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/adaptive-disconnector-plugin",
    "pluginName": "adaptive-disconnector",
    "labels": null,
    "url": "https://github.com/jenkinsci/adaptive-disconnector-plugin/pull/9",
    "description": "Hello adaptive-disconnector developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T21:24:54Z",
    "updatedAt": "2025-03-31T08:40:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/Matrix-sorter-plugin",
    "pluginName": "Matrix-sorter-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/Matrix-sorter-plugin/pull/3",
    "description": "Hello Matrix-sorter-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 15,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T21:06:44Z",
    "updatedAt": "2025-06-13T14:35:46Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudguard-shiftleft-plugin",
    "pluginName": "cloudguard-shiftleft",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudguard-shiftleft-plugin/pull/15",
    "description": "Hello cloudguard-shiftleft developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 90,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:53:08Z",
    "updatedAt": "2025-06-13T14:31:18Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-feature-management-plugin",
    "pluginName": "cloudbees-feature-management",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudbees-feature-management-plugin/pull/90",
    "description": "Hello cloudbees-feature-management developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 50,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:48:48Z",
    "updatedAt": "2025-06-13T14:25:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/clearcase-ucm-plugin",
    "pluginName": "clearcase-ucm-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/clearcase-ucm-plugin/pull/50",
    "description": "Hello clearcase-ucm-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:42:06Z",
    "updatedAt": "2025-06-13T14:19:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/carbonetes-serverless-container-scanning-and-policy-compliance-plugin",
    "pluginName": "carbonetes-serverless-container-scanning-and-policy-compliance",
    "labels": null,
    "url": "https://github.com/jenkinsci/carbonetes-serverless-container-scanning-and-policy-compliance-plugin/pull/11",
    "description": "Hello carbonetes-serverless-container-scanning-and-policy-compliance developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:31:09Z",
    "updatedAt": "2025-07-02T20:46:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/build-executors-filter-offline-plugin",
    "pluginName": "build-executors-filter-offline",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-executors-filter-offline-plugin/pull/5",
    "description": "Hello build-executors-filter-offline developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 20,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:29:26Z",
    "updatedAt": "2025-03-28T18:29:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/compuware-strobe-measurement-plugin",
    "pluginName": "compuware-strobe-measurement",
    "labels": null,
    "url": "https://github.com/jenkinsci/compuware-strobe-measurement-plugin/pull/20",
    "description": "Hello compuware-strobe-measurement developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 11,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:27:03Z",
    "updatedAt": "2025-07-02T20:40:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/btc-embeddedplatform-plugin",
    "pluginName": "btc-embeddedplatform",
    "labels": null,
    "url": "https://github.com/jenkinsci/btc-embeddedplatform-plugin/pull/11",
    "description": "Hello btc-embeddedplatform developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 64,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "MERGED",
    "createdAt": "2025-03-28T18:26:01Z",
    "updatedAt": "2025-04-14T13:27:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/compuware-topaz-for-total-test-plugin",
    "pluginName": "compuware-topaz-for-total-test",
    "labels": null,
    "url": "https://github.com/jenkinsci/compuware-topaz-for-total-test-plugin/pull/64",
    "description": "Hello compuware-topaz-for-total-test developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:24:28Z",
    "updatedAt": "2025-07-02T20:36:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/breachlock-dast-plugin",
    "pluginName": "breachlock-dast",
    "labels": null,
    "url": "https://github.com/jenkinsci/breachlock-dast-plugin/pull/4",
    "description": "Hello breachlock-dast developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 26,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:22:48Z",
    "updatedAt": "2025-03-28T18:22:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/compuware-topaz-utilities-plugin",
    "pluginName": "compuware-topaz-utilities",
    "labels": null,
    "url": "https://github.com/jenkinsci/compuware-topaz-utilities-plugin/pull/26",
    "description": "Hello compuware-topaz-utilities developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 19,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "CLOSED",
    "createdAt": "2025-03-28T18:21:59Z",
    "updatedAt": "2025-07-14T05:29:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/bmc-change-manager-imstm-plugin",
    "pluginName": "bmc-change-manager-imstm",
    "labels": null,
    "url": "https://github.com/jenkinsci/bmc-change-manager-imstm-plugin/pull/19",
    "description": "Hello bmc-change-manager-imstm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 26,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:20:02Z",
    "updatedAt": "2025-03-28T18:20:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/compuware-xpediter-code-coverage-plugin",
    "pluginName": "compuware-xpediter-code-coverage",
    "labels": null,
    "url": "https://github.com/jenkinsci/compuware-xpediter-code-coverage-plugin/pull/26",
    "description": "Hello compuware-xpediter-code-coverage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 22,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:16:54Z",
    "updatedAt": "2025-03-28T18:16:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/compuware-zadviser-api-plugin",
    "pluginName": "compuware-zadviser-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/compuware-zadviser-api-plugin/pull/22",
    "description": "Hello compuware-zadviser-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-28T17:09:24Z",
    "updatedAt": "2025-08-04T20:31:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/environment-filter-utils-plugin",
    "pluginName": "environment-filter-utils",
    "labels": null,
    "url": "https://github.com/jenkinsci/environment-filter-utils-plugin/pull/7",
    "description": "Hello environment-filter-utils developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 6,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "MERGED",
    "createdAt": "2025-03-28T16:58:42Z",
    "updatedAt": "2025-06-13T15:42:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-filter-project-trait-plugin",
    "pluginName": "bitbucket-filter-project-trait",
    "labels": null,
    "url": "https://github.com/jenkinsci/bitbucket-filter-project-trait-plugin/pull/6",
    "description": "Hello bitbucket-filter-project-trait developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:54:26Z",
    "updatedAt": "2025-07-02T20:26:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/beagle-security-plugin",
    "pluginName": "beagle-security",
    "labels": null,
    "url": "https://github.com/jenkinsci/beagle-security-plugin/pull/10",
    "description": "Hello beagle-security developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:43:09Z",
    "updatedAt": "2025-07-02T19:49:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/aws-lambda-cloud-plugin",
    "pluginName": "aws-lambda-cloud",
    "labels": null,
    "url": "https://github.com/jenkinsci/aws-lambda-cloud-plugin/pull/10",
    "description": "Hello aws-lambda-cloud developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 116,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:34:44Z",
    "updatedAt": "2025-07-02T19:17:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/autonomiq-plugin",
    "pluginName": "autonomiq",
    "labels": null,
    "url": "https://github.com/jenkinsci/autonomiq-plugin/pull/116",
    "description": "Hello autonomiq developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:28:41Z",
    "updatedAt": "2025-07-02T19:02:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/ascentialtest-cmd-line-plugin",
    "pluginName": "ascentialtest-cmd-line",
    "labels": null,
    "url": "https://github.com/jenkinsci/ascentialtest-cmd-line-plugin/pull/9",
    "description": "Hello ascentialtest-cmd-line developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 73,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:24:22Z",
    "updatedAt": "2025-07-29T12:36:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/aqua-security-scanner-plugin",
    "pluginName": "aqua-security-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/aqua-security-scanner-plugin/pull/73",
    "description": "Hello aqua-security-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:19:52Z",
    "updatedAt": "2025-07-02T18:36:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/appray-plugin",
    "pluginName": "appray",
    "labels": null,
    "url": "https://github.com/jenkinsci/appray-plugin/pull/6",
    "description": "Hello appray developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-03-28T16:14:55Z",
    "updatedAt": "2025-04-03T11:50:03Z",
    "user": "gounthar",
    "repository": "jenkinsci/ant-in-workspace-plugin",
    "pluginName": "ant-in-workspace",
    "labels": null,
    "url": "https://github.com/jenkinsci/ant-in-workspace-plugin/pull/7",
    "description": "Hello ant-in-workspace developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 17,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T15:58:13Z",
    "updatedAt": "2025-07-02T17:50:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/aio-tests-plugin",
    "pluginName": "aio-tests",
    "labels": null,
    "url": "https://github.com/jenkinsci/aio-tests-plugin/pull/17",
    "description": "Hello aio-tests developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-28T15:55:18Z",
    "updatedAt": "2025-07-02T17:45:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/agent-server-parameter-plugin",
    "pluginName": "agent-server-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/agent-server-parameter-plugin/pull/7",
    "description": "Hello agent-server-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 133,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:33:08Z",
    "updatedAt": "2025-03-29T04:17:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/docker-swarm-plugin",
    "pluginName": "docker-swarm",
    "labels": null,
    "url": "https://github.com/jenkinsci/docker-swarm-plugin/pull/133",
    "description": "Hello docker-swarm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 122,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:29:32Z",
    "updatedAt": "2025-03-29T04:08:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/docker-build-publish-plugin",
    "pluginName": "docker-build-publish",
    "labels": null,
    "url": "https://github.com/jenkinsci/docker-build-publish-plugin/pull/122",
    "description": "Hello docker-build-publish developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 74,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T22:26:35Z",
    "updatedAt": "2025-06-15T03:17:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/digitalocean-plugin",
    "pluginName": "digitalocean-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/digitalocean-plugin/pull/74",
    "description": "Hello digitalocean-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 14,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-03-27T22:25:30Z",
    "updatedAt": "2025-04-25T18:32:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonargraph-integration-plugin",
    "pluginName": "sonargraph-integration",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonargraph-integration-plugin/pull/14",
    "description": "Hello sonargraph-integration developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:22:09Z",
    "updatedAt": "2025-03-29T03:52:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/describe-with-params-plugin",
    "pluginName": "describe-with-params",
    "labels": null,
    "url": "https://github.com/jenkinsci/describe-with-params-plugin/pull/3",
    "description": "Hello describe-with-params developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 13,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "MERGED",
    "createdAt": "2025-03-27T22:21:59Z",
    "updatedAt": "2025-04-25T18:33:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonargraph-integration-plugin",
    "pluginName": "sonargraph-integration",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonargraph-integration-plugin/pull/13",
    "description": "Hello sonargraph-integration developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:18:39Z",
    "updatedAt": "2025-03-29T03:49:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/deploy-integrationserver-plugin",
    "pluginName": "deploy-integrationserver",
    "labels": null,
    "url": "https://github.com/jenkinsci/deploy-integrationserver-plugin/pull/2",
    "description": "Hello deploy-integrationserver developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:14:14Z",
    "updatedAt": "2025-03-29T03:42:32Z",
    "user": "gounthar",
    "repository": "jenkinsci/depbuilder-plugin",
    "pluginName": "depbuilder",
    "labels": null,
    "url": "https://github.com/jenkinsci/depbuilder-plugin/pull/6",
    "description": "Hello depbuilder developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 73,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:04:54Z",
    "updatedAt": "2025-03-29T03:24:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/custom-tools-plugin",
    "pluginName": "custom-tools-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/custom-tools-plugin/pull/73",
    "description": "Hello custom-tools-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:01:34Z",
    "updatedAt": "2025-03-29T03:20:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/custom-checkbox-parameter-plugin",
    "pluginName": "custom-checkbox-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/custom-checkbox-parameter-plugin/pull/7",
    "description": "Hello custom-checkbox-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 61,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T21:58:42Z",
    "updatedAt": "2025-07-10T14:48:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/custom-build-properties-plugin",
    "pluginName": "custom-build-properties",
    "labels": null,
    "url": "https://github.com/jenkinsci/custom-build-properties-plugin/pull/61",
    "description": "Hello custom-build-properties developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T21:53:47Z",
    "updatedAt": "2025-03-29T20:21:12Z",
    "user": "gounthar",
    "repository": "jenkinsci/createjobadvanced-plugin",
    "pluginName": "createjobadvanced",
    "labels": null,
    "url": "https://github.com/jenkinsci/createjobadvanced-plugin/pull/9",
    "description": "Hello createjobadvanced developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:49:36Z",
    "updatedAt": "2025-04-15T12:55:18Z",
    "user": "gounthar",
    "repository": "jenkinsci/countjobs-viewstabbar-plugin",
    "pluginName": "countjobs-viewstabbar",
    "labels": null,
    "url": "https://github.com/jenkinsci/countjobs-viewstabbar-plugin/pull/4",
    "description": "Hello countjobs-viewstabbar developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:44:55Z",
    "updatedAt": "2025-04-15T10:06:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/cortex-metrics-plugin",
    "pluginName": "cortex-metrics",
    "labels": null,
    "url": "https://github.com/jenkinsci/cortex-metrics-plugin/pull/7",
    "description": "Hello cortex-metrics developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 317,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:41:16Z",
    "updatedAt": "2025-03-29T02:46:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/conventional-commits-plugin",
    "pluginName": "conventional-commits",
    "labels": null,
    "url": "https://github.com/jenkinsci/conventional-commits-plugin/pull/317",
    "description": "Hello conventional-commits developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 16,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T21:38:36Z",
    "updatedAt": "2025-06-14T12:53:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/content-replace-plugin",
    "pluginName": "content-replace",
    "labels": null,
    "url": "https://github.com/jenkinsci/content-replace-plugin/pull/16",
    "description": "Hello content-replace developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:35:05Z",
    "updatedAt": "2025-03-29T02:33:29Z",
    "user": "gounthar",
    "repository": "jenkinsci/configuration-as-code-secret-ssm-plugin",
    "pluginName": "configuration-as-code-secret-ssm",
    "labels": null,
    "url": "https://github.com/jenkinsci/configuration-as-code-secret-ssm-plugin/pull/6",
    "description": "Hello configuration-as-code-secret-ssm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:30:00Z",
    "updatedAt": "2025-03-29T02:21:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/compuware-topaz-for-enterprise-data-plugin",
    "pluginName": "compuware-topaz-for-enterprise-data",
    "labels": null,
    "url": "https://github.com/jenkinsci/compuware-topaz-for-enterprise-data-plugin/pull/8",
    "description": "Hello compuware-topaz-for-enterprise-data developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:27:39Z",
    "updatedAt": "2025-03-29T02:18:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/computer-queue-plugin",
    "pluginName": "computer-queue-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/computer-queue-plugin/pull/9",
    "description": "Hello computer-queue-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T21:21:56Z",
    "updatedAt": "2025-05-07T17:00:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/codesonar-plugin",
    "pluginName": "codesonar",
    "labels": null,
    "url": "https://github.com/jenkinsci/codesonar-plugin/pull/9",
    "description": "Hello codesonar developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T21:19:06Z",
    "updatedAt": "2025-03-29T01:59:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/codeql-plugin",
    "pluginName": "codeql",
    "labels": null,
    "url": "https://github.com/jenkinsci/codeql-plugin/pull/6",
    "description": "Hello codeql developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 26,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:16:37Z",
    "updatedAt": "2025-03-29T01:52:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/codedx-plugin",
    "pluginName": "codedx",
    "labels": null,
    "url": "https://github.com/jenkinsci/codedx-plugin/pull/26",
    "description": "Hello codedx developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 14,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:07:28Z",
    "updatedAt": "2025-03-29T01:26:30Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudguard-shiftleft-plugin",
    "pluginName": "cloudguard-shiftleft",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudguard-shiftleft-plugin/pull/14",
    "description": "Hello cloudguard-shiftleft developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 25,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:04:43Z",
    "updatedAt": "2025-03-29T01:23:46Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudevents-plugin",
    "pluginName": "cloudevents",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudevents-plugin/pull/25",
    "description": "Hello cloudevents developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 89,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:01:39Z",
    "updatedAt": "2025-03-29T01:19:32Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-feature-management-plugin",
    "pluginName": "cloudbees-feature-management",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudbees-feature-management-plugin/pull/89",
    "description": "Hello cloudbees-feature-management developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 49,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:57:30Z",
    "updatedAt": "2025-03-29T21:50:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/clearcase-ucm-plugin",
    "pluginName": "clearcase-ucm-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/clearcase-ucm-plugin/pull/49",
    "description": "Hello clearcase-ucm-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:51:45Z",
    "updatedAt": "2025-03-29T01:05:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/carbonetes-serverless-container-scanning-and-policy-compliance-plugin",
    "pluginName": "carbonetes-serverless-container-scanning-and-policy-compliance",
    "labels": null,
    "url": "https://github.com/jenkinsci/carbonetes-serverless-container-scanning-and-policy-compliance-plugin/pull/10",
    "description": "Hello carbonetes-serverless-container-scanning-and-policy-compliance developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:41:03Z",
    "updatedAt": "2025-03-29T00:38:14Z",
    "user": "gounthar",
    "repository": "jenkinsci/build-executors-filter-offline-plugin",
    "pluginName": "build-executors-filter-offline",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-executors-filter-offline-plugin/pull/4",
    "description": "Hello build-executors-filter-offline developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 132,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:38:19Z",
    "updatedAt": "2025-03-29T00:35:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/build-discarder-plugin",
    "pluginName": "build-discarder",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-discarder-plugin/pull/132",
    "description": "Hello build-discarder developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:35:51Z",
    "updatedAt": "2025-03-29T00:32:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/btc-embeddedplatform-plugin",
    "pluginName": "btc-embeddedplatform",
    "labels": null,
    "url": "https://github.com/jenkinsci/btc-embeddedplatform-plugin/pull/10",
    "description": "Hello btc-embeddedplatform developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:32:52Z",
    "updatedAt": "2025-03-29T00:28:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/breachlock-dast-plugin",
    "pluginName": "breachlock-dast",
    "labels": null,
    "url": "https://github.com/jenkinsci/breachlock-dast-plugin/pull/3",
    "description": "Hello breachlock-dast developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 18,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T20:30:10Z",
    "updatedAt": "2025-07-14T05:30:12Z",
    "user": "gounthar",
    "repository": "jenkinsci/bmc-change-manager-imstm-plugin",
    "pluginName": "bmc-change-manager-imstm",
    "labels": null,
    "url": "https://github.com/jenkinsci/bmc-change-manager-imstm-plugin/pull/18",
    "description": "Hello bmc-change-manager-imstm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T20:26:48Z",
    "updatedAt": "2025-06-13T15:28:58Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-filter-project-trait-plugin",
    "pluginName": "bitbucket-filter-project-trait",
    "labels": null,
    "url": "https://github.com/jenkinsci/bitbucket-filter-project-trait-plugin/pull/4",
    "description": "Hello bitbucket-filter-project-trait developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:22:55Z",
    "updatedAt": "2025-03-29T00:16:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/beagle-security-plugin",
    "pluginName": "beagle-security",
    "labels": null,
    "url": "https://github.com/jenkinsci/beagle-security-plugin/pull/9",
    "description": "Hello beagle-security developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 16,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:20:45Z",
    "updatedAt": "2025-03-29T00:13:47Z",
    "user": "gounthar",
    "repository": "jenkinsci/backlog-plugin",
    "pluginName": "backlog",
    "labels": null,
    "url": "https://github.com/jenkinsci/backlog-plugin/pull/16",
    "description": "Hello backlog developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 93,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:07:50Z",
    "updatedAt": "2025-03-28T20:38:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/anchore-container-scanner-plugin",
    "pluginName": "anchore-container-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/anchore-container-scanner-plugin/pull/93",
    "description": "Hello anchore-container-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:07:11Z",
    "updatedAt": "2025-03-29T18:34:46Z",
    "user": "gounthar",
    "repository": "jenkinsci/aws-lambda-cloud-plugin",
    "pluginName": "aws-lambda-cloud",
    "labels": null,
    "url": "https://github.com/jenkinsci/aws-lambda-cloud-plugin/pull/9",
    "description": "Hello aws-lambda-cloud developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 115,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:57:44Z",
    "updatedAt": "2025-03-28T23:17:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/autonomiq-plugin",
    "pluginName": "autonomiq",
    "labels": null,
    "url": "https://github.com/jenkinsci/autonomiq-plugin/pull/115",
    "description": "Hello autonomiq developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 16,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:56:34Z",
    "updatedAt": "2025-03-28T20:46:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/advanced-installer-msi-builder-plugin",
    "pluginName": "advanced-installer-msi-builder",
    "labels": null,
    "url": "https://github.com/jenkinsci/advanced-installer-msi-builder-plugin/pull/16",
    "description": "Hello advanced-installer-msi-builder developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:47:31Z",
    "updatedAt": "2025-03-28T23:03:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/ascentialtest-cmd-line-plugin",
    "pluginName": "ascentialtest-cmd-line",
    "labels": null,
    "url": "https://github.com/jenkinsci/ascentialtest-cmd-line-plugin/pull/8",
    "description": "Hello ascentialtest-cmd-line developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 72,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:41:11Z",
    "updatedAt": "2025-07-29T12:36:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/aqua-security-scanner-plugin",
    "pluginName": "aqua-security-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/aqua-security-scanner-plugin/pull/72",
    "description": "Hello aqua-security-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 12,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T19:37:03Z",
    "updatedAt": "2025-03-27T22:16:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/sonargraph-integration-plugin",
    "pluginName": "sonargraph-integration",
    "labels": null,
    "url": "https://github.com/jenkinsci/sonargraph-integration-plugin/pull/12",
    "description": "Hello sonargraph-integration developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:36:46Z",
    "updatedAt": "2025-03-28T22:46:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/appray-plugin",
    "pluginName": "appray",
    "labels": null,
    "url": "https://github.com/jenkinsci/appray-plugin/pull/5",
    "description": "Hello appray developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T19:31:29Z",
    "updatedAt": "2025-04-03T11:23:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/ant-in-workspace-plugin",
    "pluginName": "ant-in-workspace",
    "labels": null,
    "url": "https://github.com/jenkinsci/ant-in-workspace-plugin/pull/6",
    "description": "Hello ant-in-workspace developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 29,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:27:50Z",
    "updatedAt": "2025-03-31T08:46:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/29",
    "description": "Hello ansible-tower developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 16,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:10:34Z",
    "updatedAt": "2025-03-31T08:44:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/aio-tests-plugin",
    "pluginName": "aio-tests",
    "labels": null,
    "url": "https://github.com/jenkinsci/aio-tests-plugin/pull/16",
    "description": "Hello aio-tests developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:06:54Z",
    "updatedAt": "2025-03-31T08:43:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/agent-server-parameter-plugin",
    "pluginName": "agent-server-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/agent-server-parameter-plugin/pull/6",
    "description": "Hello agent-server-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 13,
    "title": "chore(pom): Use recommended core version 2.479.1, and Java 11.",
    "state": "MERGED",
    "createdAt": "2025-03-27T18:29:03Z",
    "updatedAt": "2025-04-01T18:44:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/send-stacktrace-to-eclipse-plugin",
    "pluginName": "send-stacktrace-to-eclipse-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/send-stacktrace-to-eclipse-plugin/pull/13",
    "description": "Hello send-stacktrace-to-eclipse-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.479.1, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.479.1 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 250,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T14:40:27Z",
    "updatedAt": "2025-10-03T20:04:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/appscan-plugin",
    "pluginName": "appscan",
    "labels": null,
    "url": "https://github.com/jenkinsci/appscan-plugin/pull/250",
    "description": "Hello appscan developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 81,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-03-27T13:13:04Z",
    "updatedAt": "2025-03-27T14:24:28Z",
    "user": "gounthar",
    "repository": "jenkinsci/solarized-theme-plugin",
    "pluginName": "solarized-theme",
    "labels": null,
    "url": "https://github.com/jenkinsci/solarized-theme-plugin/pull/81",
    "description": "Hello solarized-theme developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 80,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-27T13:10:54Z",
    "updatedAt": "2025-03-27T14:24:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/solarized-theme-plugin",
    "pluginName": "solarized-theme",
    "labels": null,
    "url": "https://github.com/jenkinsci/solarized-theme-plugin/pull/80",
    "description": "Hello solarized-theme developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-03-27T09:47:41Z",
    "updatedAt": "2025-03-27T09:47:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/11",
    "description": "Hello visualworks-store developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-03-27T09:45:21Z",
    "updatedAt": "2025-03-27T09:45:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/10",
    "description": "Hello visualworks-store developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 9,
    "title": "Applied recipe MigrateToJUnit5",
    "state": "OPEN",
    "createdAt": "2025-03-26T16:14:56Z",
    "updatedAt": "2025-03-27T09:37:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/9",
    "description": "Hello visualworks-store developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate to JUnit 5\n    io.jenkins.tools.pluginmodernizer.MigrateToJUnit5\n    Migrate tests from JUnit 4 to JUnit 5.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-26T14:36:35Z",
    "updatedAt": "2025-03-26T14:46:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/8",
    "description": "Hello visualworks-store developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 76,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-26T10:21:53Z",
    "updatedAt": "2025-06-08T17:21:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/lucene-search-plugin",
    "pluginName": "lucene-search",
    "labels": [
      "enhancement",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/lucene-search-plugin/pull/76",
    "description": "Hello lucene-search developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 376,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "MERGED",
    "createdAt": "2025-03-25T18:51:00Z",
    "updatedAt": "2025-06-18T18:27:17Z",
    "user": "krisstern",
    "repository": "jenkinsci/tekton-client-plugin",
    "pluginName": "tekton-client",
    "labels": null,
    "url": "https://github.com/jenkinsci/tekton-client-plugin/pull/376",
    "description": "Follow up on #363.\nHello tekton-client developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!\nSubmitter checklist\n\n Make sure you are opening from a topic/feature/bugfix branch (right side) and not your main branch!\n Ensure that the pull request title represents the desired changelog entry\n Please describe what you did\n Link to relevant issues in GitHub or Jira\n Link to relevant pull requests, esp. upstream and downstream changes\n Ensure you have provided tests - that demonstrates feature works or fixes the issue\n\n\nc.c. @gounthar",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 74,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-03-25T16:12:34Z",
    "updatedAt": "2025-03-26T10:14:07Z",
    "user": "gounthar",
    "repository": "jenkinsci/lucene-search-plugin",
    "pluginName": "lucene-search",
    "labels": null,
    "url": "https://github.com/jenkinsci/lucene-search-plugin/pull/74",
    "description": "Hello lucene-search developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 57,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-03-24T16:39:57Z",
    "updatedAt": "2025-06-24T19:56:07Z",
    "user": "gounthar",
    "repository": "jenkinsci/statuspage-gating-plugin",
    "pluginName": "statuspage-gating",
    "labels": null,
    "url": "https://github.com/jenkinsci/statuspage-gating-plugin/pull/57",
    "description": "Hello statuspage-gating developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 33,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-04-27T19:31:02Z",
    "updatedAt": "2025-04-28T03:10:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/proxmox-plugin",
    "pluginName": "proxmox",
    "labels": null,
    "url": "https://github.com/jenkinsci/proxmox-plugin/pull/33",
    "description": "Hello proxmox developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 32,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "MERGED",
    "createdAt": "2025-04-27T15:05:27Z",
    "updatedAt": "2025-04-28T03:10:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/proxmox-plugin",
    "pluginName": "proxmox",
    "labels": null,
    "url": "https://github.com/jenkinsci/proxmox-plugin/pull/32",
    "description": "Hello proxmox developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 255,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T16:05:05Z",
    "updatedAt": "2025-04-26T16:23:56Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/255",
    "description": "Hello skip-notifications-trait developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 15,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T16:03:10Z",
    "updatedAt": "2025-04-26T16:24:07Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/s3-jobcacher-storage-plugin",
    "pluginName": "s3-jobcacher-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/s3-jobcacher-storage-plugin/pull/15",
    "description": "Hello s3-jobcacher-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 368,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T16:00:24Z",
    "updatedAt": "2025-04-26T16:24:12Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/postgresql-fingerprint-storage-plugin",
    "pluginName": "postgresql-fingerprint-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/postgresql-fingerprint-storage-plugin/pull/368",
    "description": "Hello postgresql-fingerprint-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 197,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:57:02Z",
    "updatedAt": "2025-04-26T16:24:18Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-npm-plugin",
    "pluginName": "pipeline-npm",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-npm-plugin/pull/197",
    "description": "Hello pipeline-npm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 46,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:55:10Z",
    "updatedAt": "2025-04-26T16:24:24Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-cps-http-plugin",
    "pluginName": "pipeline-cps-http",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-cps-http-plugin/pull/46",
    "description": "Hello pipeline-cps-http developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 125,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:52:49Z",
    "updatedAt": "2025-04-26T16:24:31Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/parameter-separator-plugin",
    "pluginName": "parameter-separator",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/parameter-separator-plugin/pull/125",
    "description": "Hello parameter-separator developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 255,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:49:11Z",
    "updatedAt": "2025-04-26T16:24:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openshift-k8s-credentials-plugin",
    "pluginName": "openshift-k8s-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/openshift-k8s-credentials-plugin/pull/255",
    "description": "Hello openshift-k8s-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 149,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:46:42Z",
    "updatedAt": "2025-04-26T16:24:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/nunit-plugin",
    "pluginName": "nunit",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/nunit-plugin/pull/149",
    "description": "Hello nunit developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 171,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:43:43Z",
    "updatedAt": "2025-04-26T16:25:07Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/171",
    "description": "Hello next-executions developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 69,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:41:18Z",
    "updatedAt": "2025-04-26T16:26:29Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/mariadb-api-plugin",
    "pluginName": "mariadb-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/mariadb-api-plugin/pull/69",
    "description": "Hello mariadb-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 143,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:39:48Z",
    "updatedAt": "2025-04-26T16:26:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/login-theme-plugin",
    "pluginName": "login-theme",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/login-theme-plugin/pull/143",
    "description": "Hello login-theme developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 299,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:37:48Z",
    "updatedAt": "2025-04-26T16:26:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/locale-plugin",
    "pluginName": "locale",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/locale-plugin/pull/299",
    "description": "Hello locale developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 169,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:35:46Z",
    "updatedAt": "2025-04-26T16:26:49Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/junit-attachments-plugin",
    "pluginName": "junit-attachments",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/junit-attachments-plugin/pull/169",
    "description": "Hello junit-attachments developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 116,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:31:49Z",
    "updatedAt": "2025-04-26T16:26:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jnr-posix-api-plugin",
    "pluginName": "jnr-posix-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jnr-posix-api-plugin/pull/116",
    "description": "Hello jnr-posix-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 84,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:30:18Z",
    "updatedAt": "2025-04-26T16:27:01Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/84",
    "description": "Hello json-path-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 76,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:28:53Z",
    "updatedAt": "2025-04-26T16:27:06Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/76",
    "description": "Hello json-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 70,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:27:24Z",
    "updatedAt": "2025-04-26T16:27:15Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/70",
    "description": "Hello joda-time-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 16,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:26:01Z",
    "updatedAt": "2025-04-26T16:27:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-oras-storage-plugin",
    "pluginName": "jobcacher-oras-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-oras-storage-plugin/pull/16",
    "description": "Hello jobcacher-oras-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 92,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:23:54Z",
    "updatedAt": "2025-04-26T16:28:01Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-artifactory-storage-plugin",
    "pluginName": "jobcacher-artifactory-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-artifactory-storage-plugin/pull/92",
    "description": "Hello jobcacher-artifactory-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 419,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:21:55Z",
    "updatedAt": "2025-04-26T16:27:54Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-plugin",
    "pluginName": "jobcacher",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-plugin/pull/419",
    "description": "Hello jobcacher developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 13,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:17:57Z",
    "updatedAt": "2025-04-26T16:27:48Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jcaptcha-plugin",
    "pluginName": "jcaptcha-plugin",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jcaptcha-plugin/pull/13",
    "description": "Hello jcaptcha-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 198,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:16:25Z",
    "updatedAt": "2025-04-26T16:27:42Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/hidden-parameter-plugin",
    "pluginName": "hidden-parameter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/hidden-parameter-plugin/pull/198",
    "description": "Hello hidden-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 79,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:14:24Z",
    "updatedAt": "2025-04-26T16:27:36Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/79",
    "description": "Hello gson-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 231,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:12:34Z",
    "updatedAt": "2025-04-26T15:16:31Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitlab-kubernetes-credentials-plugin",
    "pluginName": "gitlab-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gitlab-kubernetes-credentials-plugin/pull/231",
    "description": "Hello gitlab-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 113,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:10:01Z",
    "updatedAt": "2025-04-26T15:16:25Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/flyway-runner-plugin",
    "pluginName": "flyway-runner",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/flyway-runner-plugin/pull/113",
    "description": "Hello flyway-runner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 163,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:04:43Z",
    "updatedAt": "2025-04-26T15:12:41Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/163",
    "description": "Hello file-operations developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 153,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T15:01:23Z",
    "updatedAt": "2025-04-26T15:12:35Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/153",
    "description": "Hello extra-tool-installers developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 126,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T14:59:08Z",
    "updatedAt": "2025-04-26T15:12:29Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extension-filter-plugin",
    "pluginName": "extension-filter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extension-filter-plugin/pull/126",
    "description": "Hello extension-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 78,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T14:57:13Z",
    "updatedAt": "2025-04-26T15:02:23Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mariadb-plugin",
    "pluginName": "database-mariadb",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-mariadb-plugin/pull/78",
    "description": "Hello database-mariadb developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 92,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T14:54:55Z",
    "updatedAt": "2025-04-26T15:02:16Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/coverage-badges-extension-plugin",
    "pluginName": "coverage-badges-extension",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/coverage-badges-extension-plugin/pull/92",
    "description": "Hello coverage-badges-extension developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 27,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "CLOSED",
    "createdAt": "2025-04-26T14:52:40Z",
    "updatedAt": "2025-04-26T16:30:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/commons-math3-api-plugin",
    "pluginName": "commons-math3-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/commons-math3-api-plugin/pull/27",
    "description": "Hello commons-math3-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 80,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T14:51:06Z",
    "updatedAt": "2025-04-26T14:55:41Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/byte-buddy-api-plugin",
    "pluginName": "byte-buddy-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/byte-buddy-api-plugin/pull/80",
    "description": "Hello byte-buddy-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 65,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T14:49:43Z",
    "updatedAt": "2025-04-26T14:55:35Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/build-history-metrics-plugin",
    "pluginName": "build-history-metrics-plugin",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/build-history-metrics-plugin/pull/65",
    "description": "Hello build-history-metrics-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 279,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T14:47:19Z",
    "updatedAt": "2025-04-26T14:55:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/279",
    "description": "Hello bitbucket-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 108,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T14:41:44Z",
    "updatedAt": "2025-04-26T14:56:29Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-artifact-manager-plugin",
    "pluginName": "artifactory-artifact-manager",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-artifact-manager-plugin/pull/108",
    "description": "Hello artifactory-artifact-manager developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 78,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T10:37:38Z",
    "updatedAt": "2025-04-26T11:01:08Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/78",
    "description": "Hello asm-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 54,
    "title": "Bump bom to 4669.v0e99c712a_30e",
    "state": "MERGED",
    "createdAt": "2025-04-26T10:36:14Z",
    "updatedAt": "2025-04-26T10:41:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/54",
    "description": "Hello artifactory-client-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 120,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17",
    "state": "MERGED",
    "createdAt": "2025-04-25T15:52:54Z",
    "updatedAt": "2025-04-28T15:43:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-plugin",
    "pluginName": "bitbucket",
    "labels": null,
    "url": "https://github.com/jenkinsci/bitbucket-plugin/pull/120",
    "description": "Hello bitbucket developers! 👋\nThis should help getting #118 to build.\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 84,
    "title": "Applied recipe ReplaceLibrariesWithApiPlugin",
    "state": "CLOSED",
    "createdAt": "2025-04-25T15:40:30Z",
    "updatedAt": "2025-04-25T18:57:02Z",
    "user": "gounthar",
    "repository": "jenkinsci/gitee-plugin",
    "pluginName": "gitee",
    "labels": null,
    "url": "https://github.com/jenkinsci/gitee-plugin/pull/84",
    "description": "Hello gitee developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Use API plugin instead of direct dependency\n    io.jenkins.tools.pluginmodernizer.ReplaceLibrariesWithApiPlugin\n    Use API plugins instead of direct dependency.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 83,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-04-25T15:14:41Z",
    "updatedAt": "2025-04-28T12:40:47Z",
    "user": "gounthar",
    "repository": "jenkinsci/gitee-plugin",
    "pluginName": "gitee",
    "labels": [
      "maintenance"
    ],
    "url": "https://github.com/jenkinsci/gitee-plugin/pull/83",
    "description": "Hello gitee developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 9,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-04-24T13:55:42Z",
    "updatedAt": "2025-04-24T13:55:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/global-slack-notifier-plugin",
    "pluginName": "global-slack-notifier",
    "labels": null,
    "url": "https://github.com/jenkinsci/global-slack-notifier-plugin/pull/9",
    "description": "Hello global-slack-notifier developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17}\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!\nTesting done\n\nSubmitter checklist\n\n Make sure you are opening from a topic/feature/bugfix branch (right side) and not your main branch!\n Ensure that the pull request title represents the desired changelog entry\n Please describe what you did\n Link to relevant issues in GitHub or Jira\n Link to relevant pull requests, esp. upstream and downstream changes\n Ensure you have provided tests - that demonstrates feature works or fixes the issue",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 428,
    "title": "chore(github): Add CODEOWNERS",
    "state": "CLOSED",
    "createdAt": "2025-05-28T13:32:42Z",
    "updatedAt": "2025-05-28T13:34:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/openstack-cloud-plugin",
    "pluginName": "openstack-cloud",
    "labels": null,
    "url": "https://github.com/jenkinsci/openstack-cloud-plugin/pull/428",
    "description": "Hello openstack-cloud developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "PENDING"
  },
  {
    "number": 417,
    "title": "chore(github): Add CODEOWNERS",
    "state": "CLOSED",
    "createdAt": "2025-05-26T07:37:32Z",
    "updatedAt": "2025-05-26T07:50:47Z",
    "user": "gounthar",
    "repository": "jenkinsci/openstack-cloud-plugin",
    "pluginName": "openstack-cloud",
    "labels": null,
    "url": "https://github.com/jenkinsci/openstack-cloud-plugin/pull/417",
    "description": "Hello openstack-cloud developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "PENDING"
  },
  {
    "number": 8,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-27T19:42:44Z",
    "updatedAt": "2025-06-27T19:42:44Z",
    "user": "CodexRaunak",
    "repository": "jenkinsci/loadcomplete-plugin",
    "pluginName": "loadcomplete",
    "labels": null,
    "url": "https://github.com/jenkinsci/loadcomplete-plugin/pull/8",
    "description": "Hello loadcomplete developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 2,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T20:10:06Z",
    "updatedAt": "2025-06-24T20:10:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/redmine-metrics-report-plugin",
    "pluginName": "redmine-metrics-report",
    "labels": null,
    "url": "https://github.com/jenkinsci/redmine-metrics-report-plugin/pull/2",
    "description": "Hello redmine-metrics-report developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 24,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T19:55:23Z",
    "updatedAt": "2025-06-24T19:55:23Z",
    "user": "gounthar",
    "repository": "jenkinsci/rpmsign-plugin",
    "pluginName": "rpmsign-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/rpmsign-plugin/pull/24",
    "description": "Hello rpmsign-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 103,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T19:33:52Z",
    "updatedAt": "2025-06-24T19:41:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/select2-api-plugin",
    "pluginName": "select2-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/select2-api-plugin/pull/103",
    "description": "Hello select2-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.479 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T18:32:20Z",
    "updatedAt": "2025-06-24T18:32:20Z",
    "user": "gounthar",
    "repository": "jenkinsci/tag-profiler-plugin",
    "pluginName": "tag-profiler",
    "labels": null,
    "url": "https://github.com/jenkinsci/tag-profiler-plugin/pull/4",
    "description": "Hello tag-profiler developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T18:27:52Z",
    "updatedAt": "2025-06-24T18:27:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/tanaguru-plugin",
    "pluginName": "tanaguru",
    "labels": null,
    "url": "https://github.com/jenkinsci/tanaguru-plugin/pull/3",
    "description": "Hello tanaguru developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 413,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "MERGED",
    "createdAt": "2025-06-24T18:22:33Z",
    "updatedAt": "2025-07-02T12:36:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/tekton-client-plugin",
    "pluginName": "tekton-client",
    "labels": null,
    "url": "https://github.com/jenkinsci/tekton-client-plugin/pull/413",
    "description": "Hello tekton-client developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 2,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T18:06:57Z",
    "updatedAt": "2025-06-24T18:06:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/teststudio-plugin",
    "pluginName": "teststudio",
    "labels": null,
    "url": "https://github.com/jenkinsci/teststudio-plugin/pull/2",
    "description": "Hello teststudio developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T18:03:31Z",
    "updatedAt": "2025-06-24T18:03:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/teststudioapitesting-plugin",
    "pluginName": "teststudioapitesting",
    "labels": null,
    "url": "https://github.com/jenkinsci/teststudioapitesting-plugin/pull/2",
    "description": "Hello teststudioapitesting developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T18:00:25Z",
    "updatedAt": "2025-06-24T18:00:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/teststudiomobiletesting-plugin",
    "pluginName": "teststudiomobiletesting",
    "labels": null,
    "url": "https://github.com/jenkinsci/teststudiomobiletesting-plugin/pull/2",
    "description": "Hello teststudiomobiletesting developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 12,
    "title": "feat(java): Require Jenkins core 2.479 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T17:46:53Z",
    "updatedAt": "2025-06-24T17:46:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/toolenv-plugin",
    "pluginName": "toolenv",
    "labels": null,
    "url": "https://github.com/jenkinsci/toolenv-plugin/pull/12",
    "description": "Hello toolenv developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 2,
    "title": "feat(java): Require Jenkins core 2.479 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T17:27:56Z",
    "updatedAt": "2025-06-24T17:27:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/upstream-downstream-view-plugin",
    "pluginName": "upstream-downstream-view",
    "labels": null,
    "url": "https://github.com/jenkinsci/upstream-downstream-view-plugin/pull/2",
    "description": "Hello upstream-downstream-view developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 3,
    "title": "feat(java): Require Jenkins core 2.479 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T17:24:34Z",
    "updatedAt": "2025-06-24T17:24:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/uptime-plugin",
    "pluginName": "uptime",
    "labels": null,
    "url": "https://github.com/jenkinsci/uptime-plugin/pull/3",
    "description": "Hello uptime developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-06-24T16:39:25Z",
    "updatedAt": "2025-06-24T16:39:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/xooa-plugin",
    "pluginName": "xooa",
    "labels": null,
    "url": "https://github.com/jenkinsci/xooa-plugin/pull/4",
    "description": "Hello xooa developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-06-24T07:19:14Z",
    "updatedAt": "2025-06-25T09:18:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-keep-running-step-plugin",
    "pluginName": "pipeline-keep-running-step",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-keep-running-step-plugin/pull/8",
    "description": "Hello pipeline-keep-running-step developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 388,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-06-23T14:04:17Z",
    "updatedAt": "2025-06-23T14:04:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/allure-plugin",
    "pluginName": "allure-jenkins-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/allure-plugin/pull/388",
    "description": "Hello allure-jenkins-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 194,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "MERGED",
    "createdAt": "2025-07-31T13:34:57Z",
    "updatedAt": "2025-09-02T19:07:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/reverse-proxy-auth-plugin",
    "pluginName": "reverse-proxy-auth-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/reverse-proxy-auth-plugin/pull/194",
    "description": "Hello reverse-proxy-auth-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.504.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.504.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "PENDING"
  },
  {
    "number": 3,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-07-29T16:35:35Z",
    "updatedAt": "2025-07-29T16:39:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/kryptowire-plugin",
    "pluginName": "kryptowire",
    "labels": null,
    "url": "https://github.com/jenkinsci/kryptowire-plugin/pull/3",
    "description": "Hello kryptowire developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 472,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-07-29T16:31:19Z",
    "updatedAt": "2025-07-29T18:09:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/ec2-fleet-plugin",
    "pluginName": "ec2-fleet",
    "labels": null,
    "url": "https://github.com/jenkinsci/ec2-fleet-plugin/pull/472",
    "description": "Hello ec2-fleet developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 470,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "MERGED",
    "createdAt": "2025-07-29T16:07:52Z",
    "updatedAt": "2025-07-31T06:05:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/ec2-fleet-plugin",
    "pluginName": "ec2-fleet",
    "labels": null,
    "url": "https://github.com/jenkinsci/ec2-fleet-plugin/pull/470",
    "description": "Hello ec2-fleet developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.504.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.504.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 40,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-07-28T18:02:23Z",
    "updatedAt": "2025-07-28T18:04:03Z",
    "user": "gounthar",
    "repository": "jenkinsci/testfairy-plugin",
    "pluginName": "TestFairy",
    "labels": null,
    "url": "https://github.com/jenkinsci/testfairy-plugin/pull/40",
    "description": "Hello TestFairy developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.504.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.504.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 282,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "CLOSED",
    "createdAt": "2025-07-28T12:58:51Z",
    "updatedAt": "2025-07-28T15:40:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/badge-plugin",
    "pluginName": "badge",
    "labels": null,
    "url": "https://github.com/jenkinsci/badge-plugin/pull/282",
    "description": "Hello badge developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.504.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.504.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 271,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T11:11:18Z",
    "updatedAt": "2025-07-27T11:23:41Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/271",
    "description": "Hello skip-notifications-trait developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 30,
    "title": "chore(pom): Use recommended core version 2.492.3, and Java 11",
    "state": "MERGED",
    "createdAt": "2025-07-27T11:09:13Z",
    "updatedAt": "2025-07-27T11:23:52Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/s3-jobcacher-storage-plugin",
    "pluginName": "s3-jobcacher-storage",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/s3-jobcacher-storage-plugin/pull/30",
    "description": "Hello s3-jobcacher-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 377,
    "title": "chore(pom): Use recommended core version 2.492.3, and Java 11",
    "state": "MERGED",
    "createdAt": "2025-07-27T11:06:41Z",
    "updatedAt": "2025-07-27T11:13:53Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/postgresql-fingerprint-storage-plugin",
    "pluginName": "postgresql-fingerprint-storage",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/postgresql-fingerprint-storage-plugin/pull/377",
    "description": "Hello postgresql-fingerprint-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 16,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T11:04:40Z",
    "updatedAt": "2025-07-27T11:12:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-cps-oras-plugin",
    "pluginName": "pipeline-cps-oras",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-cps-oras-plugin/pull/16",
    "description": "Hello pipeline-cps-oras developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 12,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T11:02:45Z",
    "updatedAt": "2025-07-27T11:11:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-lib-oras-plugin",
    "pluginName": "pipeline-lib-oras",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/pipeline-lib-oras-plugin/pull/12",
    "description": "Hello pipeline-lib-oras developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 215,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T11:00:48Z",
    "updatedAt": "2025-07-27T11:08:27Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-npm-plugin",
    "pluginName": "pipeline-npm",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/pipeline-npm-plugin/pull/215",
    "description": "Hello pipeline-npm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 52,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:59:00Z",
    "updatedAt": "2025-07-27T11:08:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-cps-http-plugin",
    "pluginName": "pipeline-cps-http",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/pipeline-cps-http-plugin/pull/52",
    "description": "Hello pipeline-cps-http developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 131,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:57:10Z",
    "updatedAt": "2025-07-27T11:08:53Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/parameter-separator-plugin",
    "pluginName": "parameter-separator",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/parameter-separator-plugin/pull/131",
    "description": "Hello parameter-separator developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 278,
    "title": "chore(pom): Use recommended core version 2.504.2",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:55:21Z",
    "updatedAt": "2025-07-27T11:09:06Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openshift-k8s-credentials-plugin",
    "pluginName": "openshift-k8s-credentials",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/openshift-k8s-credentials-plugin/pull/278",
    "description": "Hello openshift-k8s-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.504.2, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.504.2 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 155,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:53:19Z",
    "updatedAt": "2025-07-27T11:09:17Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/nunit-plugin",
    "pluginName": "nunit",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/nunit-plugin/pull/155",
    "description": "Hello nunit developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 177,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:51:27Z",
    "updatedAt": "2025-07-27T11:09:29Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/177",
    "description": "Hello next-executions developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 149,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:49:37Z",
    "updatedAt": "2025-07-27T11:09:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/login-theme-plugin",
    "pluginName": "login-theme",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/login-theme-plugin/pull/149",
    "description": "Hello login-theme developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 321,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:47:48Z",
    "updatedAt": "2025-07-27T11:09:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/locale-plugin",
    "pluginName": "locale",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/locale-plugin/pull/321",
    "description": "Hello locale developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 179,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:46:01Z",
    "updatedAt": "2025-07-27T11:10:02Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/junit-attachments-plugin",
    "pluginName": "junit-attachments",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/junit-attachments-plugin/pull/179",
    "description": "Hello junit-attachments developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 30,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:44:13Z",
    "updatedAt": "2025-07-27T11:10:50Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-oras-storage-plugin",
    "pluginName": "jobcacher-oras-storage",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-oras-storage-plugin/pull/30",
    "description": "Hello jobcacher-oras-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 102,
    "title": "chore(pom): Use recommended core version 2.492.3, and Java 11",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:42:17Z",
    "updatedAt": "2025-07-27T11:13:43Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-artifactory-storage-plugin",
    "pluginName": "jobcacher-artifactory-storage",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-artifactory-storage-plugin/pull/102",
    "description": "Hello jobcacher-artifactory-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 444,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:40:22Z",
    "updatedAt": "2025-07-27T11:10:34Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-plugin",
    "pluginName": "jobcacher",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-plugin/pull/444",
    "description": "Hello jobcacher developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 21,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:38:09Z",
    "updatedAt": "2025-07-27T11:10:23Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jcaptcha-plugin",
    "pluginName": "jcaptcha-plugin",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jcaptcha-plugin/pull/21",
    "description": "Hello jcaptcha-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 216,
    "title": "chore(pom): Use recommended core version 2.492.3, and Java 11",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:36:35Z",
    "updatedAt": "2025-07-27T11:13:34Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/hidden-parameter-plugin",
    "pluginName": "hidden-parameter",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/hidden-parameter-plugin/pull/216",
    "description": "Hello hidden-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 252,
    "title": "chore(pom): Use recommended core version 2.504.1",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:34:39Z",
    "updatedAt": "2025-07-27T11:13:25Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitlab-kubernetes-credentials-plugin",
    "pluginName": "gitlab-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gitlab-kubernetes-credentials-plugin/pull/252",
    "description": "Hello gitlab-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.504.1, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.504.1 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 124,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:32:36Z",
    "updatedAt": "2025-07-27T11:13:01Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/flyway-runner-plugin",
    "pluginName": "flyway-runner",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/flyway-runner-plugin/pull/124",
    "description": "Hello flyway-runner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 162,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:29:03Z",
    "updatedAt": "2025-07-27T11:12:48Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/162",
    "description": "Hello extra-tool-installers developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 132,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:27:10Z",
    "updatedAt": "2025-07-27T11:12:34Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extension-filter-plugin",
    "pluginName": "extension-filter",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/extension-filter-plugin/pull/132",
    "description": "Hello extension-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 87,
    "title": "chore(pom): Use recommended core version 2.492.3, and Java 11",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:25:26Z",
    "updatedAt": "2025-07-27T11:14:48Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mariadb-plugin",
    "pluginName": "database-mariadb",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/database-mariadb-plugin/pull/87",
    "description": "Hello database-mariadb developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 99,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:23:33Z",
    "updatedAt": "2025-07-28T04:17:16Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/coverage-badges-extension-plugin",
    "pluginName": "coverage-badges-extension",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/coverage-badges-extension-plugin/pull/99",
    "description": "Hello coverage-badges-extension developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 71,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:21:30Z",
    "updatedAt": "2025-07-27T11:14:20Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/build-history-metrics-plugin",
    "pluginName": "build-history-metrics-plugin",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/build-history-metrics-plugin/pull/71",
    "description": "Hello build-history-metrics-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 301,
    "title": "chore(pom): Use recommended core version 2.504.1",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:19:50Z",
    "updatedAt": "2025-07-27T11:08:00Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/301",
    "description": "Hello bitbucket-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.504.1, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.504.1 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 123,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:17:37Z",
    "updatedAt": "2025-07-27T11:07:50Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-artifact-manager-plugin",
    "pluginName": "artifactory-artifact-manager",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/artifactory-artifact-manager-plugin/pull/123",
    "description": "Hello artifactory-artifact-manager developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 214,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:13:04Z",
    "updatedAt": "2025-07-27T11:07:40Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/oss-symbols-api-plugin",
    "pluginName": "oss-symbols-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/oss-symbols-api-plugin/pull/214",
    "description": "Hello oss-symbols-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 76,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:11:29Z",
    "updatedAt": "2025-07-27T10:18:12Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/mariadb-api-plugin",
    "pluginName": "mariadb-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/mariadb-api-plugin/pull/76",
    "description": "Hello mariadb-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 125,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:09:52Z",
    "updatedAt": "2025-07-27T11:07:17Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jnr-posix-api-plugin",
    "pluginName": "jnr-posix-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jnr-posix-api-plugin/pull/125",
    "description": "Hello jnr-posix-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 93,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:08:10Z",
    "updatedAt": "2025-07-27T10:17:20Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/93",
    "description": "Hello json-path-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 28,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:06:39Z",
    "updatedAt": "2025-07-27T10:17:09Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jsoup-plugin",
    "pluginName": "jsoup",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jsoup-plugin/pull/28",
    "description": "Hello jsoup developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 85,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:05:08Z",
    "updatedAt": "2025-07-27T10:16:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/85",
    "description": "Hello json-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 79,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:03:32Z",
    "updatedAt": "2025-07-27T10:16:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/79",
    "description": "Hello joda-time-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 85,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T10:01:58Z",
    "updatedAt": "2025-07-27T10:16:22Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/85",
    "description": "Hello gson-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 38,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T09:58:26Z",
    "updatedAt": "2025-07-27T10:15:36Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/commons-math3-api-plugin",
    "pluginName": "commons-math3-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/commons-math3-api-plugin/pull/38",
    "description": "Hello commons-math3-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 90,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T09:56:48Z",
    "updatedAt": "2025-07-27T10:17:48Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/byte-buddy-api-plugin",
    "pluginName": "byte-buddy-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/byte-buddy-api-plugin/pull/90",
    "description": "Hello byte-buddy-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 89,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T09:55:10Z",
    "updatedAt": "2025-07-27T10:16:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/89",
    "description": "Hello asm-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 65,
    "title": "chore(pom): Use recommended core version 2.492.3",
    "state": "MERGED",
    "createdAt": "2025-07-27T09:53:27Z",
    "updatedAt": "2025-07-27T10:15:57Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/65",
    "description": "Hello artifactory-client-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.492.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.492.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 54,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-07-26T10:08:45Z",
    "updatedAt": "2025-07-26T10:08:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-enabler-plugin",
    "pluginName": "cloudbees-enabler",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudbees-enabler-plugin/pull/54",
    "description": "Hello cloudbees-enabler developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 53,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-07-26T10:00:05Z",
    "updatedAt": "2025-07-26T10:00:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-enabler-plugin",
    "pluginName": "cloudbees-enabler",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudbees-enabler-plugin/pull/53",
    "description": "Hello cloudbees-enabler developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.504.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.504.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 104,
    "title": "Add Jenkinsfile to build plugin on the Jenkins Infrastructure",
    "state": "CLOSED",
    "createdAt": "2025-07-22T10:38:23Z",
    "updatedAt": "2025-08-23T17:11:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/vectorcast-execution-plugin",
    "pluginName": "vectorcast-execution",
    "labels": null,
    "url": "https://github.com/jenkinsci/vectorcast-execution-plugin/pull/104",
    "description": "Hello vectorcast-execution developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java 17 and 21.\nYour plugin is already building with Java 17 and 21. We will continue to support these versions.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 30,
    "title": "Add Jenkinsfile to build plugin on the Jenkins Infrastructure",
    "state": "OPEN",
    "createdAt": "2025-07-22T07:40:48Z",
    "updatedAt": "2025-09-04T13:04:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/zephyr-enterprise-test-management-plugin",
    "pluginName": "zephyr-enterprise-test-management",
    "labels": null,
    "url": "https://github.com/jenkinsci/zephyr-enterprise-test-management-plugin/pull/30",
    "description": "Hello zephyr-enterprise-test-management developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java 17 and 21.\nYour plugin is already building with Java 17 and 21. We will continue to support these versions.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 88,
    "title": "feat(ci): Builds on the Jenkins Infrastructure",
    "state": "CLOSED",
    "createdAt": "2025-07-21T21:01:53Z",
    "updatedAt": "2025-07-22T06:56:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/popper-api-plugin",
    "pluginName": "popper-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/popper-api-plugin/pull/88",
    "description": "Hello popper-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java 8 and 11.\nThere will come a time when we no longer support plugins built with JDK 8 or 11.\nAfter this PR is merged, we will submit additional automated PRs to enable your plugin to build with Java 17 and 21.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 6,
    "title": "feat(ci): Builds on the Jenkins Infrastructure",
    "state": "OPEN",
    "createdAt": "2025-07-21T17:34:11Z",
    "updatedAt": "2025-07-21T17:34:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/humbug-plugin",
    "pluginName": "humbug",
    "labels": null,
    "url": "https://github.com/jenkinsci/humbug-plugin/pull/6",
    "description": "Hello humbug developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java .",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 110,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "MERGED",
    "createdAt": "2025-07-21T16:53:12Z",
    "updatedAt": "2025-07-21T17:15:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/figlet-buildstep-plugin",
    "pluginName": "figlet-buildstep",
    "labels": null,
    "url": "https://github.com/jenkinsci/figlet-buildstep-plugin/pull/110",
    "description": "Hello figlet-buildstep developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nThe Javadoc tool no longer supports the \u003ctt\u003e tag in HTML5 mode. I then replaced \u003ctt\u003e with \u003ccode\u003e in the Javadoc comments.\nThat's why the master branch build fails. 🤷",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 109,
    "title": "feat(ci): Builds on the Jenkins Infrastructure",
    "state": "MERGED",
    "createdAt": "2025-07-21T16:25:03Z",
    "updatedAt": "2025-07-21T16:46:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/figlet-buildstep-plugin",
    "pluginName": "figlet-buildstep",
    "labels": null,
    "url": "https://github.com/jenkinsci/figlet-buildstep-plugin/pull/109",
    "description": "Hello figlet-buildstep developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java 17 and 21.\nYour plugin is already building with Java 17 and 21. We will continue to support these versions.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 15,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-07-21T13:26:59Z",
    "updatedAt": "2025-07-21T13:30:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/requests-plugin",
    "pluginName": "requests",
    "labels": null,
    "url": "https://github.com/jenkinsci/requests-plugin/pull/15",
    "description": "Hello requests developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "Add Jenkinsfile to build plugin on the Jenkins Infrastructure",
    "state": "OPEN",
    "createdAt": "2025-07-21T11:45:22Z",
    "updatedAt": "2025-09-03T08:55:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/blackduck-coverity-on-polaris-plugin",
    "pluginName": "blackduck-coverity-on-polaris",
    "labels": null,
    "url": "https://github.com/jenkinsci/blackduck-coverity-on-polaris-plugin/pull/8",
    "description": "Hello blackduck-coverity-on-polaris developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java 17 and 21.\nYour plugin is already building with Java 17 and 21. We will continue to support these versions.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 25,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-07-21T10:08:35Z",
    "updatedAt": "2025-07-21T10:12:29Z",
    "user": "gounthar",
    "repository": "jenkinsci/testcomplete-plugin",
    "pluginName": "TestComplete",
    "labels": null,
    "url": "https://github.com/jenkinsci/testcomplete-plugin/pull/25",
    "description": "Hello TestComplete developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.492.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.492.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 15,
    "title": "Bump bom to 5324.v88b_4300d0dd9",
    "state": "MERGED",
    "createdAt": "2025-08-30T13:03:30Z",
    "updatedAt": "2025-08-30T13:17:46Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-lib-oras-plugin",
    "pluginName": "pipeline-lib-oras",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-lib-oras-plugin/pull/15",
    "description": "Hello pipeline-lib-oras developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 18,
    "title": "Bump bom to 5324.v88b_4300d0dd9",
    "state": "MERGED",
    "createdAt": "2025-08-30T13:01:14Z",
    "updatedAt": "2025-08-30T13:17:37Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-cps-oras-plugin",
    "pluginName": "pipeline-cps-oras",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-cps-oras-plugin/pull/18",
    "description": "Hello pipeline-cps-oras developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 51,
    "title": "Bump bom to 5324.v88b_4300d0dd9",
    "state": "MERGED",
    "createdAt": "2025-08-30T12:43:13Z",
    "updatedAt": "2025-08-30T12:55:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/oras-java-api-plugin",
    "pluginName": "oras-java-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/oras-java-api-plugin/pull/51",
    "description": "Hello oras-java-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 12,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "CLOSED",
    "createdAt": "2025-08-27T12:43:52Z",
    "updatedAt": "2025-08-27T18:54:04Z",
    "user": "CodexRaunak",
    "repository": "jenkinsci/safe-batch-environment-filter-plugin",
    "pluginName": "safe-batch-environment-filter",
    "labels": null,
    "url": "https://github.com/jenkinsci/safe-batch-environment-filter-plugin/pull/12",
    "description": "Hello safe-batch-environment-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.504.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.504.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "PENDING"
  },
  {
    "number": 11,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "CLOSED",
    "createdAt": "2025-08-23T16:07:49Z",
    "updatedAt": "2025-08-23T16:08:08Z",
    "user": "CodexRaunak",
    "repository": "jenkinsci/safe-batch-environment-filter-plugin",
    "pluginName": "safe-batch-environment-filter",
    "labels": null,
    "url": "https://github.com/jenkinsci/safe-batch-environment-filter-plugin/pull/11",
    "description": "Hello safe-batch-environment-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.504.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.504.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "PENDING"
  },
  {
    "number": 264,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-10-03T18:22:26Z",
    "updatedAt": "2025-10-03T18:22:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/appscan-plugin",
    "pluginName": "appscan",
    "labels": null,
    "url": "https://github.com/jenkinsci/appscan-plugin/pull/264",
    "description": "Hello appscan developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "FAILURE"
  }
]
