name: Update Plugins List and Create PR

on:
  schedule:
    - cron: '30 5 * * *'  # Runs daily at 5:30 AM UTC (at most once per day)
  workflow_dispatch:  # Allows manual execution of the workflow

jobs:
  update-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl parallel xsltproc

      - name: Download plugins.json
        run: curl -L https://updates.jenkins.io/current/update-center.actual.json > plugins.json

      - name: Run find-plugin-repos.sh
        run: chmod +x find-plugin-repos.sh && ./find-plugin-repos.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Source config.sh and export variables
        id: config_vars
        run: |
            source config.sh
            echo "csv_file_no_jenkinsfile=$csv_file_no_jenkinsfile" >> $GITHUB_ENV
            echo "csv_file_without_java_version=$csv_file" >> $GITHUB_ENV
            echo "csv_file_jdk11=$csv_file_jdk11" >> $GITHUB_ENV
            echo "depends_on_java_8_txt=$depends_on_java_8_txt" >> $GITHUB_ENV
            echo "depends_on_java_8_csv=$depends_on_java_8_csv" >> $GITHUB_ENV

      - name: Run create-plugins-list-file.sh
        run: |
          # Source the configuration file to load environment variables
          source config.sh
          # Make the script create-plugins-list-file.sh executable
          chmod +x ./create-plugins-list-file.sh
          # Run the script to create a plugins list file for repositories without a Jenkinsfile
          # The output is saved to the specified CSV file and then moved to the appropriate output file
          ./create-plugins-list-file.sh ${{ env.csv_file_no_jenkinsfile }} plugins.json
          touch plugins.txt && mv plugins.txt $plugins_list_no_jenkinsfile_output_file
          cp $plugins_list_no_jenkinsfile_output_file $plugins_list_no_jenkinsfile_main_output_file
          # Run the script again to create a plugins list file for repositories without a specified Java version
          # The output is saved to the specified CSV file and then moved to the appropriate output file
          ./create-plugins-list-file.sh ${{ env.csv_file_without_java_version }} plugins.json
          touch plugins.txt && mv plugins.txt $plugins_list_old_java_output_file
          cp $plugins_list_old_java_output_file $plugins_list_old_java_main_output_file
          # Run the script again to create a plugins list file for repositories using JDK 11
          ./create-plugins-list-file.sh ${{ env.csv_file_jdk11 }} plugins.json
          touch plugins.txt && mv plugins.txt $plugins_list_jdk11_output_file
          cp $plugins_list_jdk11_output_file $plugins_list_jdk11_main_output_file
          # Run the script again to create a plugins list file for repositories depending on Java 8
          ./create-plugins-list-file.sh ${{ env.depends_on_java_8_csv }} plugins.json
          touch plugins.txt && mv plugins.txt $depends_on_java_8_txt
          cp $depends_on_java_8_txt $plugins_list_depends_on_java_8_main_output_file

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run from-csv-to-plugins-file.sh
        run: |
          chmod +x ./from-csv-to-plugins-file.sh
          ./from-csv-to-plugins-file.sh ${{ env.csv_file_no_jenkinsfile }} plugins.json plugins-output.txt plugins-rejected.txt

      - name: Cleanup reports
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG_MODE: true
        run: |
          chmod +x ./cleanup-reports.sh
          ./cleanup-reports.sh

      - name: Generate top plugins by popularity
        run: |
          curl -L https://updates.jenkins.io/current/update-center.actual.json > plugins.json
          chmod +x ./get-most-popular-plugins.sh
          ./get-most-popular-plugins.sh
          # Verify the output files exist and are not empty
          if [[ ! -s top_plugins_with_versions.txt ]]; then
            echo "Warning: top_plugins_with_versions.txt is empty or was not created"
          else
            echo "Successfully generated top_plugins_with_versions.txt with $(wc -l < top_plugins_with_versions.txt) plugins"
          fi

      - name: Check for changes
        run: |
          git diff --exit-code || echo "changed=true" >> $GITHUB_ENV

      - name: Configure Git
        if: env.changed == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Set dynamic branch name
        run: echo "DYNAMIC_BRANCH=update-plugins-$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Fetch Default Branch Name
        id: fetch_default_branch
        run: |
          DEFAULT_BRANCH=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}" | jq -r '.default_branch')
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          branch: ${{ env.DYNAMIC_BRANCH }}
          base: main
          title: "Update plugins list"
          body: "Automatically generated by GitHub Actions."
          labels: automated-pr
