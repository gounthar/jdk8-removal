name: JDK Versions Tracking (17, 21, 25)

on:
  schedule:
    - cron: '0 7 * * *'  # Run daily at 7:00 AM UTC (1 hour after JDK 25 tracking)
  workflow_dispatch:  # Allow manual execution of the workflow

permissions:
  contents: write  # Need write permission to commit results

concurrency:
  group: jdk-versions-tracking
  cancel-in-progress: false

jobs:
  track-jdk-versions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for git operations

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq parallel git

          # Install GitHub CLI
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Download Jenkins plugins data
        run: |
          echo "Downloading latest Jenkins plugin registry..."

          # Download with redirects and show errors
          if ! curl -L -f -o plugins.json https://updates.jenkins.io/current/update-center.actual.json; then
            echo "❌ Failed to download Jenkins plugin registry"
            exit 1
          fi

          # Validate downloaded file
          FILE_SIZE=$(stat -c%s plugins.json 2>/dev/null || stat -f%z plugins.json 2>/dev/null)
          echo "Downloaded file size: $FILE_SIZE bytes"

          if [ "$FILE_SIZE" -lt 100000 ]; then
            echo "❌ Downloaded file is too small ($FILE_SIZE bytes)"
            echo "Expected file size: several MB"
            echo "First 500 characters of downloaded file:"
            head -c 500 plugins.json
            exit 1
          fi

          # Validate JSON format
          if ! jq empty plugins.json 2>/dev/null; then
            echo "❌ Downloaded file is not valid JSON"
            echo "First 500 characters of downloaded file:"
            head -c 500 plugins.json
            exit 1
          fi

          echo "✓ Successfully downloaded and validated plugin registry ($FILE_SIZE bytes)"

      - name: Run JDK versions tracking
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RATE_LIMIT_DELAY: 2
          DEBUG_MODE: false
        run: |
          echo "Running unified JDK versions tracking (17, 21, 25)..."
          chmod +x check-jdk-versions.sh
          chmod +x get-all-plugins.sh
          ./check-jdk-versions.sh

      - name: Get current date
        id: date
        run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Generate summary
        if: always()
        run: |
          echo "## JDK Versions Tracking Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Scope:** ALL Jenkins Plugins (~2036 plugins)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          REPORT_FILE="reports/jdk_versions_tracking_${{ steps.date.outputs.date }}.json"

          if [ -f "$REPORT_FILE" ]; then
            TOTAL=$(jq 'length' "$REPORT_FILE")
            JDK17_COUNT=$(jq '[.[] | select(.has_jdk17 == true)] | length' "$REPORT_FILE")
            JDK21_COUNT=$(jq '[.[] | select(.has_jdk21 == true)] | length' "$REPORT_FILE")
            JDK25_COUNT=$(jq '[.[] | select(.has_jdk25 == true)] | length' "$REPORT_FILE")
            WITH_JENKINSFILE=$(jq '[.[] | select(.has_jenkinsfile == true)] | length' "$REPORT_FILE")

            echo "### Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Total plugins scanned:** $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "- **Plugins with Jenkinsfile:** $WITH_JENKINSFILE" >> $GITHUB_STEP_SUMMARY
            echo "- **Plugins building with JDK 17:** $JDK17_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Plugins building with JDK 21:** $JDK21_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Plugins building with JDK 25:** $JDK25_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Calculate percentages (with decimal precision)
            if [ "$WITH_JENKINSFILE" -gt 0 ]; then
              JDK17_PCT=$(awk "BEGIN {printf \"%.1f\", ($JDK17_COUNT*100)/$WITH_JENKINSFILE}")
              JDK21_PCT=$(awk "BEGIN {printf \"%.1f\", ($JDK21_COUNT*100)/$WITH_JENKINSFILE}")
              JDK25_PCT=$(awk "BEGIN {printf \"%.1f\", ($JDK25_COUNT*100)/$WITH_JENKINSFILE}")

              echo "### Adoption Rates (of plugins with Jenkinsfile)" >> $GITHUB_STEP_SUMMARY
              echo "- **JDK 17:** ${JDK17_PCT}%" >> $GITHUB_STEP_SUMMARY
              echo "- **JDK 21:** ${JDK21_PCT}%" >> $GITHUB_STEP_SUMMARY
              echo "- **JDK 25:** ${JDK25_PCT}%" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Report file not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Commit and push results
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add generated files
          git add reports/jdk_versions_tracking_*.json || true
          git add reports/jdk_versions_tracking_*.csv || true

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit \
              -m "chore: update JDK versions tracking data (17, 21, 25) - $(date +%Y-%m-%d)" \
              -m "Automated update from GitHub Actions" \
              -m "Tracks JDK 17, 21, and 25 adoption across ALL Jenkins plugins" \
              -m "[skip ci]"

            # Pull with rebase and retry push up to 3 times
            for i in {1..3}; do
              if git fetch origin main --prune && git pull --rebase --autostash origin main && git push origin HEAD:main; then
                echo "Successfully pushed changes"
                break
              else
                if [ $i -eq 3 ]; then
                  echo "Failed to push after 3 attempts"
                  exit 1
                fi
                echo "Push failed, retrying (attempt $i/3)..."
                git rebase --abort 2>/dev/null || true
                sleep 5
              fi
            done
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jdk-versions-tracking-results-${{ steps.date.outputs.date }}
          path: |
            reports/jdk_versions_tracking_*.json
            reports/jdk_versions_tracking_*.csv
            logs/jdk_versions_tracking_*.log
          retention-days: 90
